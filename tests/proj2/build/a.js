(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){var Zepto=function(){var undefined,key,$,classList,emptyArray=[],slice=emptyArray.slice,filter=emptyArray.filter,document=window.document,elementDisplay={},classCache={},cssNumber={"column-count":1,columns:1,"font-weight":1,"line-height":1,opacity:1,"z-index":1,zoom:1},fragmentRE=/^\s*<(\w+|!)[^>]*>/,singleTagRE=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,tagExpanderRE=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,rootNodeRE=/^(?:body|html)$/i,capitalRE=/([A-Z])/g,methodAttributes=["val","css","html","text","data","width","height","offset"],adjacencyOperators=["after","prepend","before","append"],table=document.createElement("table"),tableRow=document.createElement("tr"),containers={tr:document.createElement("tbody"),tbody:table,thead:table,tfoot:table,td:tableRow,th:tableRow,"*":document.createElement("div")},readyRE=/complete|loaded|interactive/,simpleSelectorRE=/^[\w-]*$/,class2type={},toString=class2type.toString,zepto={},camelize,uniq,tempParent=document.createElement("div"),propMap={tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},isArray=Array.isArray||function(object){return object instanceof Array};zepto.matches=function(element,selector){if(!selector||!element||element.nodeType!==1)return false;var matchesSelector=element.webkitMatchesSelector||element.mozMatchesSelector||element.oMatchesSelector||element.matchesSelector;if(matchesSelector)return matchesSelector.call(element,selector);var match,parent=element.parentNode,temp=!parent;if(temp)(parent=tempParent).appendChild(element);match=~zepto.qsa(parent,selector).indexOf(element);temp&&tempParent.removeChild(element);return match};function type(obj){return obj==null?String(obj):class2type[toString.call(obj)]||"object"}function isFunction(value){return type(value)=="function"}function isWindow(obj){return obj!=null&&obj==obj.window}function isDocument(obj){return obj!=null&&obj.nodeType==obj.DOCUMENT_NODE}function isObject(obj){return type(obj)=="object"}function isPlainObject(obj){return isObject(obj)&&!isWindow(obj)&&Object.getPrototypeOf(obj)==Object.prototype}function likeArray(obj){return typeof obj.length=="number"}function compact(array){return filter.call(array,function(item){return item!=null})}function flatten(array){return array.length>0?$.fn.concat.apply([],array):array}camelize=function(str){return str.replace(/-+(.)?/g,function(match,chr){return chr?chr.toUpperCase():""})};function dasherize(str){return str.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/_/g,"-").toLowerCase()}uniq=function(array){return filter.call(array,function(item,idx){return array.indexOf(item)==idx})};function classRE(name){return name in classCache?classCache[name]:classCache[name]=new RegExp("(^|\\s)"+name+"(\\s|$)")}function maybeAddPx(name,value){return typeof value=="number"&&!cssNumber[dasherize(name)]?value+"px":value}function defaultDisplay(nodeName){var element,display;if(!elementDisplay[nodeName]){element=document.createElement(nodeName);document.body.appendChild(element);display=getComputedStyle(element,"").getPropertyValue("display");element.parentNode.removeChild(element);display=="none"&&(display="block");elementDisplay[nodeName]=display}return elementDisplay[nodeName]}function children(element){return"children"in element?slice.call(element.children):$.map(element.childNodes,function(node){if(node.nodeType==1)return node})}zepto.fragment=function(html,name,properties){var dom,nodes,container;if(singleTagRE.test(html))dom=$(document.createElement(RegExp.$1));if(!dom){if(html.replace)html=html.replace(tagExpanderRE,"<$1></$2>");if(name===undefined)name=fragmentRE.test(html)&&RegExp.$1;if(!(name in containers))name="*";container=containers[name];container.innerHTML=""+html;dom=$.each(slice.call(container.childNodes),function(){container.removeChild(this)})}if(isPlainObject(properties)){nodes=$(dom);$.each(properties,function(key,value){if(methodAttributes.indexOf(key)>-1)nodes[key](value);else nodes.attr(key,value)})}return dom};zepto.Z=function(dom,selector){dom=dom||[];dom.__proto__=$.fn;dom.selector=selector||"";return dom};zepto.isZ=function(object){return object instanceof zepto.Z};zepto.init=function(selector,context){var dom;if(!selector)return zepto.Z();else if(typeof selector=="string"){selector=selector.trim();if(selector[0]=="<"&&fragmentRE.test(selector))dom=zepto.fragment(selector,RegExp.$1,context),selector=null;else if(context!==undefined)return $(context).find(selector);else dom=zepto.qsa(document,selector)}else if(isFunction(selector))return $(document).ready(selector);else if(zepto.isZ(selector))return selector;else{if(isArray(selector))dom=compact(selector);else if(isObject(selector))dom=[selector],selector=null;else if(fragmentRE.test(selector))dom=zepto.fragment(selector.trim(),RegExp.$1,context),selector=null;else if(context!==undefined)return $(context).find(selector);else dom=zepto.qsa(document,selector)}return zepto.Z(dom,selector)};$=function(selector,context){return zepto.init(selector,context)};function extend(target,source,deep){for(key in source)if(deep&&(isPlainObject(source[key])||isArray(source[key]))){if(isPlainObject(source[key])&&!isPlainObject(target[key]))target[key]={};if(isArray(source[key])&&!isArray(target[key]))target[key]=[];extend(target[key],source[key],deep)}else if(source[key]!==undefined)target[key]=source[key]}$.extend=function(target){var deep,args=slice.call(arguments,1);if(typeof target=="boolean"){deep=target;target=args.shift()}args.forEach(function(arg){extend(target,arg,deep)});return target};zepto.qsa=function(element,selector){var found,maybeID=selector[0]=="#",maybeClass=!maybeID&&selector[0]==".",nameOnly=maybeID||maybeClass?selector.slice(1):selector,isSimple=simpleSelectorRE.test(nameOnly);return isDocument(element)&&isSimple&&maybeID?(found=element.getElementById(nameOnly))?[found]:[]:element.nodeType!==1&&element.nodeType!==9?[]:slice.call(isSimple&&!maybeID?maybeClass?element.getElementsByClassName(nameOnly):element.getElementsByTagName(selector):element.querySelectorAll(selector))};function filtered(nodes,selector){return selector==null?$(nodes):$(nodes).filter(selector)}$.contains=document.documentElement.contains?function(parent,node){return parent!==node&&parent.contains(node)}:function(parent,node){while(node&&(node=node.parentNode))if(node===parent)return true;return false};function funcArg(context,arg,idx,payload){return isFunction(arg)?arg.call(context,idx,payload):arg}function setAttribute(node,name,value){value==null?node.removeAttribute(name):node.setAttribute(name,value)}function className(node,value){var klass=node.className||"",svg=klass&&klass.baseVal!==undefined;if(value===undefined)return svg?klass.baseVal:klass;svg?klass.baseVal=value:node.className=value}function deserializeValue(value){try{return value?value=="true"||(value=="false"?false:value=="null"?null:+value+""==value?+value:/^[\[\{]/.test(value)?$.parseJSON(value):value):value}catch(e){return value}}$.type=type;$.isFunction=isFunction;$.isWindow=isWindow;$.isArray=isArray;$.isPlainObject=isPlainObject;$.isEmptyObject=function(obj){var name;for(name in obj)return false;return true};$.inArray=function(elem,array,i){return emptyArray.indexOf.call(array,elem,i)};$.camelCase=camelize;$.trim=function(str){return str==null?"":String.prototype.trim.call(str)};$.uuid=0;$.support={};$.expr={};$.map=function(elements,callback){var value,values=[],i,key;if(likeArray(elements))for(i=0;i<elements.length;i++){value=callback(elements[i],i);if(value!=null)values.push(value)}else for(key in elements){value=callback(elements[key],key);if(value!=null)values.push(value)}return flatten(values)};$.each=function(elements,callback){var i,key;if(likeArray(elements)){for(i=0;i<elements.length;i++)if(callback.call(elements[i],i,elements[i])===false)return elements}else{for(key in elements)if(callback.call(elements[key],key,elements[key])===false)return elements}return elements};$.grep=function(elements,callback){return filter.call(elements,callback)};if(window.JSON)$.parseJSON=JSON.parse;$.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(i,name){class2type["[object "+name+"]"]=name.toLowerCase()});$.fn={forEach:emptyArray.forEach,reduce:emptyArray.reduce,push:emptyArray.push,sort:emptyArray.sort,indexOf:emptyArray.indexOf,concat:emptyArray.concat,map:function(fn){return $($.map(this,function(el,i){return fn.call(el,i,el)}))},slice:function(){return $(slice.apply(this,arguments))},ready:function(callback){if(readyRE.test(document.readyState)&&document.body)callback($);else document.addEventListener("DOMContentLoaded",function(){callback($)},false);return this},get:function(idx){return idx===undefined?slice.call(this):this[idx>=0?idx:idx+this.length]},toArray:function(){return this.get()},size:function(){return this.length},remove:function(){return this.each(function(){if(this.parentNode!=null)this.parentNode.removeChild(this)})},each:function(callback){emptyArray.every.call(this,function(el,idx){return callback.call(el,idx,el)!==false});return this},filter:function(selector){if(isFunction(selector))return this.not(this.not(selector));return $(filter.call(this,function(element){return zepto.matches(element,selector)}))},add:function(selector,context){return $(uniq(this.concat($(selector,context))))},is:function(selector){return this.length>0&&zepto.matches(this[0],selector)},not:function(selector){var nodes=[];if(isFunction(selector)&&selector.call!==undefined)this.each(function(idx){if(!selector.call(this,idx))nodes.push(this)});else{var excludes=typeof selector=="string"?this.filter(selector):likeArray(selector)&&isFunction(selector.item)?slice.call(selector):$(selector);this.forEach(function(el){if(excludes.indexOf(el)<0)nodes.push(el)})}return $(nodes)},has:function(selector){return this.filter(function(){return isObject(selector)?$.contains(this,selector):$(this).find(selector).size()})},eq:function(idx){return idx===-1?this.slice(idx):this.slice(idx,+idx+1)},first:function(){var el=this[0];return el&&!isObject(el)?el:$(el)},last:function(){var el=this[this.length-1];return el&&!isObject(el)?el:$(el)},find:function(selector){var result,$this=this;if(!selector)result=$();else if(typeof selector=="object")result=$(selector).filter(function(){var node=this;return emptyArray.some.call($this,function(parent){return $.contains(parent,node)})});else if(this.length==1)result=$(zepto.qsa(this[0],selector));else result=this.map(function(){return zepto.qsa(this,selector)});return result},closest:function(selector,context){var node=this[0],collection=false;if(typeof selector=="object")collection=$(selector);while(node&&!(collection?collection.indexOf(node)>=0:zepto.matches(node,selector)))node=node!==context&&!isDocument(node)&&node.parentNode;return $(node)},parents:function(selector){var ancestors=[],nodes=this;while(nodes.length>0)nodes=$.map(nodes,function(node){if((node=node.parentNode)&&!isDocument(node)&&ancestors.indexOf(node)<0){ancestors.push(node);return node}});return filtered(ancestors,selector)},parent:function(selector){return filtered(uniq(this.pluck("parentNode")),selector)},children:function(selector){return filtered(this.map(function(){return children(this)}),selector)},contents:function(){return this.map(function(){return slice.call(this.childNodes)})},siblings:function(selector){return filtered(this.map(function(i,el){return filter.call(children(el.parentNode),function(child){return child!==el})}),selector)},empty:function(){return this.each(function(){this.innerHTML=""})},pluck:function(property){return $.map(this,function(el){return el[property]})},show:function(){return this.each(function(){this.style.display=="none"&&(this.style.display="");if(getComputedStyle(this,"").getPropertyValue("display")=="none")this.style.display=defaultDisplay(this.nodeName)})},replaceWith:function(newContent){return this.before(newContent).remove()},wrap:function(structure){var func=isFunction(structure);if(this[0]&&!func)var dom=$(structure).get(0),clone=dom.parentNode||this.length>1;return this.each(function(index){$(this).wrapAll(func?structure.call(this,index):clone?dom.cloneNode(true):dom)})},wrapAll:function(structure){if(this[0]){$(this[0]).before(structure=$(structure));var children;while((children=structure.children()).length)structure=children.first();$(structure).append(this)}return this},wrapInner:function(structure){var func=isFunction(structure);return this.each(function(index){var self=$(this),contents=self.contents(),dom=func?structure.call(this,index):structure;contents.length?contents.wrapAll(dom):self.append(dom)})},unwrap:function(){this.parent().each(function(){$(this).replaceWith($(this).children())});return this},clone:function(){return this.map(function(){return this.cloneNode(true)})},hide:function(){return this.css("display","none")},toggle:function(setting){return this.each(function(){var el=$(this);(setting===undefined?el.css("display")=="none":setting)?el.show():el.hide()})},prev:function(selector){return $(this.pluck("previousElementSibling")).filter(selector||"*")},next:function(selector){return $(this.pluck("nextElementSibling")).filter(selector||"*")},html:function(html){return 0 in arguments?this.each(function(idx){var originHtml=this.innerHTML;$(this).empty().append(funcArg(this,html,idx,originHtml))}):0 in this?this[0].innerHTML:null},text:function(text){return 0 in arguments?this.each(function(idx){var newText=funcArg(this,text,idx,this.textContent);this.textContent=newText==null?"":""+newText}):0 in this?this[0].textContent:null},attr:function(name,value){var result;return typeof name=="string"&&!(1 in arguments)?!this.length||this[0].nodeType!==1?undefined:!(result=this[0].getAttribute(name))&&name in this[0]?this[0][name]:result:this.each(function(idx){if(this.nodeType!==1)return;if(isObject(name))for(key in name)setAttribute(this,key,name[key]);else setAttribute(this,name,funcArg(this,value,idx,this.getAttribute(name)))})},removeAttr:function(name){return this.each(function(){this.nodeType===1&&name.split(" ").forEach(function(attribute){setAttribute(this,attribute)},this)})},prop:function(name,value){name=propMap[name]||name;return 1 in arguments?this.each(function(idx){this[name]=funcArg(this,value,idx,this[name])}):this[0]&&this[0][name]},data:function(name,value){var attrName="data-"+name.replace(capitalRE,"-$1").toLowerCase();var data=1 in arguments?this.attr(attrName,value):this.attr(attrName);return data!==null?deserializeValue(data):undefined},val:function(value){return 0 in arguments?this.each(function(idx){this.value=funcArg(this,value,idx,this.value)}):this[0]&&(this[0].multiple?$(this[0]).find("option").filter(function(){return this.selected}).pluck("value"):this[0].value)},offset:function(coordinates){if(coordinates)return this.each(function(index){var $this=$(this),coords=funcArg(this,coordinates,index,$this.offset()),parentOffset=$this.offsetParent().offset(),props={top:coords.top-parentOffset.top,left:coords.left-parentOffset.left};if($this.css("position")=="static")props["position"]="relative";$this.css(props)});if(!this.length)return null;var obj=this[0].getBoundingClientRect();return{left:obj.left+window.pageXOffset,top:obj.top+window.pageYOffset,width:Math.round(obj.width),height:Math.round(obj.height)}},css:function(property,value){if(arguments.length<2){var computedStyle,element=this[0];if(!element)return;computedStyle=getComputedStyle(element,"");if(typeof property=="string")return element.style[camelize(property)]||computedStyle.getPropertyValue(property);else if(isArray(property)){var props={};$.each(property,function(_,prop){props[prop]=element.style[camelize(prop)]||computedStyle.getPropertyValue(prop)});return props}}var css="";if(type(property)=="string"){if(!value&&value!==0)this.each(function(){this.style.removeProperty(dasherize(property))});else css=dasherize(property)+":"+maybeAddPx(property,value)}else{for(key in property)if(!property[key]&&property[key]!==0)this.each(function(){this.style.removeProperty(dasherize(key))});else css+=dasherize(key)+":"+maybeAddPx(key,property[key])+";"}return this.each(function(){this.style.cssText+=";"+css})},index:function(element){return element?this.indexOf($(element)[0]):this.parent().children().indexOf(this[0])},hasClass:function(name){if(!name)return false;return emptyArray.some.call(this,function(el){return this.test(className(el))},classRE(name))},addClass:function(name){if(!name)return this;return this.each(function(idx){if(!("className"in this))return;classList=[];var cls=className(this),newName=funcArg(this,name,idx,cls);newName.split(/\s+/g).forEach(function(klass){if(!$(this).hasClass(klass))classList.push(klass)},this);classList.length&&className(this,cls+(cls?" ":"")+classList.join(" "))})},removeClass:function(name){return this.each(function(idx){if(!("className"in this))return;if(name===undefined)return className(this,"");classList=className(this);funcArg(this,name,idx,classList).split(/\s+/g).forEach(function(klass){classList=classList.replace(classRE(klass)," ")});className(this,classList.trim())})},toggleClass:function(name,when){if(!name)return this;return this.each(function(idx){var $this=$(this),names=funcArg(this,name,idx,className(this));names.split(/\s+/g).forEach(function(klass){(when===undefined?!$this.hasClass(klass):when)?$this.addClass(klass):$this.removeClass(klass)})})},scrollTop:function(value){if(!this.length)return;var hasScrollTop="scrollTop"in this[0];if(value===undefined)return hasScrollTop?this[0].scrollTop:this[0].pageYOffset;return this.each(hasScrollTop?function(){this.scrollTop=value}:function(){this.scrollTo(this.scrollX,value)})},scrollLeft:function(value){if(!this.length)return;var hasScrollLeft="scrollLeft"in this[0];if(value===undefined)return hasScrollLeft?this[0].scrollLeft:this[0].pageXOffset;return this.each(hasScrollLeft?function(){this.scrollLeft=value}:function(){this.scrollTo(value,this.scrollY)})},position:function(){if(!this.length)return;var elem=this[0],offsetParent=this.offsetParent(),offset=this.offset(),parentOffset=rootNodeRE.test(offsetParent[0].nodeName)?{top:0,left:0}:offsetParent.offset();offset.top-=parseFloat($(elem).css("margin-top"))||0;offset.left-=parseFloat($(elem).css("margin-left"))||0;parentOffset.top+=parseFloat($(offsetParent[0]).css("border-top-width"))||0;parentOffset.left+=parseFloat($(offsetParent[0]).css("border-left-width"))||0;return{top:offset.top-parentOffset.top,left:offset.left-parentOffset.left}},offsetParent:function(){return this.map(function(){var parent=this.offsetParent||document.body;while(parent&&!rootNodeRE.test(parent.nodeName)&&$(parent).css("position")=="static")parent=parent.offsetParent;return parent})}};$.fn.detach=$.fn.remove;["width","height"].forEach(function(dimension){var dimensionProperty=dimension.replace(/./,function(m){return m[0].toUpperCase()});$.fn[dimension]=function(value){var offset,el=this[0];if(value===undefined)return isWindow(el)?el["inner"+dimensionProperty]:isDocument(el)?el.documentElement["scroll"+dimensionProperty]:(offset=this.offset())&&offset[dimension];else return this.each(function(idx){el=$(this);el.css(dimension,funcArg(this,value,idx,el[dimension]()))})}});function traverseNode(node,fun){fun(node);for(var i=0,len=node.childNodes.length;i<len;i++)traverseNode(node.childNodes[i],fun)}adjacencyOperators.forEach(function(operator,operatorIndex){var inside=operatorIndex%2;$.fn[operator]=function(){var argType,nodes=$.map(arguments,function(arg){argType=type(arg);return argType=="object"||argType=="array"||arg==null?arg:zepto.fragment(arg)}),parent,copyByClone=this.length>1;if(nodes.length<1)return this;return this.each(function(_,target){parent=inside?target:target.parentNode;target=operatorIndex==0?target.nextSibling:operatorIndex==1?target.firstChild:operatorIndex==2?target:null;var parentInDocument=$.contains(document.documentElement,parent);nodes.forEach(function(node){if(copyByClone)node=node.cloneNode(true);else if(!parent)return $(node).remove();parent.insertBefore(node,target);if(parentInDocument)traverseNode(node,function(el){if(el.nodeName!=null&&el.nodeName.toUpperCase()==="SCRIPT"&&(!el.type||el.type==="text/javascript")&&!el.src)window["eval"].call(window,el.innerHTML)})})})};$.fn[inside?operator+"To":"insert"+(operatorIndex?"Before":"After")]=function(html){$(html)[operator](this);return this}});zepto.Z.prototype=$.fn;zepto.uniq=uniq;zepto.deserializeValue=deserializeValue;$.zepto=zepto;return $}();window.Zepto=Zepto;window.$===undefined&&(window.$=Zepto);(function($){var _zid=1,undefined,slice=Array.prototype.slice,isFunction=$.isFunction,isString=function(obj){return typeof obj=="string"},handlers={},specialEvents={},focusinSupported="onfocusin"in window,focus={focus:"focusin",blur:"focusout"},hover={mouseenter:"mouseover",mouseleave:"mouseout"};specialEvents.click=specialEvents.mousedown=specialEvents.mouseup=specialEvents.mousemove="MouseEvents";function zid(element){return element._zid||(element._zid=_zid++)}function findHandlers(element,event,fn,selector){event=parse(event);if(event.ns)var matcher=matcherFor(event.ns);return(handlers[zid(element)]||[]).filter(function(handler){return handler&&(!event.e||handler.e==event.e)&&(!event.ns||matcher.test(handler.ns))&&(!fn||zid(handler.fn)===zid(fn))&&(!selector||handler.sel==selector)})}function parse(event){var parts=(""+event).split(".");return{e:parts[0],ns:parts.slice(1).sort().join(" ")}}function matcherFor(ns){return new RegExp("(?:^| )"+ns.replace(" "," .* ?")+"(?: |$)")}function eventCapture(handler,captureSetting){return handler.del&&(!focusinSupported&&handler.e in focus)||!!captureSetting}function realEvent(type){return hover[type]||focusinSupported&&focus[type]||type}function add(element,events,fn,data,selector,delegator,capture){var id=zid(element),set=handlers[id]||(handlers[id]=[]);events.split(/\s/).forEach(function(event){if(event=="ready")return $(document).ready(fn);var handler=parse(event);handler.fn=fn;handler.sel=selector;if(handler.e in hover)fn=function(e){var related=e.relatedTarget;if(!related||related!==this&&!$.contains(this,related))return handler.fn.apply(this,arguments)};handler.del=delegator;var callback=delegator||fn;handler.proxy=function(e){e=compatible(e);if(e.isImmediatePropagationStopped())return;e.data=data;var result=callback.apply(element,e._args==undefined?[e]:[e].concat(e._args));if(result===false)e.preventDefault(),e.stopPropagation();return result};handler.i=set.length;set.push(handler);if("addEventListener"in element)element.addEventListener(realEvent(handler.e),handler.proxy,eventCapture(handler,capture))})}function remove(element,events,fn,selector,capture){var id=zid(element);(events||"").split(/\s/).forEach(function(event){findHandlers(element,event,fn,selector).forEach(function(handler){delete handlers[id][handler.i];if("removeEventListener"in element)element.removeEventListener(realEvent(handler.e),handler.proxy,eventCapture(handler,capture))})})}$.event={add:add,remove:remove};$.proxy=function(fn,context){var args=2 in arguments&&slice.call(arguments,2);if(isFunction(fn)){var proxyFn=function(){return fn.apply(context,args?args.concat(slice.call(arguments)):arguments)};proxyFn._zid=zid(fn);return proxyFn}else if(isString(context)){if(args){args.unshift(fn[context],fn);return $.proxy.apply(null,args)}else{return $.proxy(fn[context],fn)}}else{throw new TypeError("expected function")}};$.fn.bind=function(event,data,callback){return this.on(event,data,callback)};$.fn.unbind=function(event,callback){return this.off(event,callback)};$.fn.one=function(event,selector,data,callback){return this.on(event,selector,data,callback,1)};var returnTrue=function(){return true},returnFalse=function(){return false},ignoreProperties=/^([A-Z]|returnValue$|layer[XY]$)/,eventMethods={preventDefault:"isDefaultPrevented",stopImmediatePropagation:"isImmediatePropagationStopped",stopPropagation:"isPropagationStopped"};function compatible(event,source){if(source||!event.isDefaultPrevented){source||(source=event);$.each(eventMethods,function(name,predicate){var sourceMethod=source[name];event[name]=function(){this[predicate]=returnTrue;return sourceMethod&&sourceMethod.apply(source,arguments)};event[predicate]=returnFalse});if(source.defaultPrevented!==undefined?source.defaultPrevented:"returnValue"in source?source.returnValue===false:source.getPreventDefault&&source.getPreventDefault())event.isDefaultPrevented=returnTrue}return event}function createProxy(event){var key,proxy={originalEvent:event};for(key in event)if(!ignoreProperties.test(key)&&event[key]!==undefined)proxy[key]=event[key];return compatible(proxy,event)}$.fn.delegate=function(selector,event,callback){return this.on(event,selector,callback)};$.fn.undelegate=function(selector,event,callback){return this.off(event,selector,callback)};$.fn.live=function(event,callback){$(document.body).delegate(this.selector,event,callback);return this};$.fn.die=function(event,callback){$(document.body).undelegate(this.selector,event,callback);return this};$.fn.on=function(event,selector,data,callback,one){var autoRemove,delegator,$this=this;if(event&&!isString(event)){$.each(event,function(type,fn){$this.on(type,selector,data,fn,one)});return $this}if(!isString(selector)&&!isFunction(callback)&&callback!==false)callback=data,data=selector,selector=undefined;if(isFunction(data)||data===false)callback=data,data=undefined;if(callback===false)callback=returnFalse;return $this.each(function(_,element){if(one)autoRemove=function(e){remove(element,e.type,callback);return callback.apply(this,arguments)};if(selector)delegator=function(e){var evt,match=$(e.target).closest(selector,element).get(0);if(match&&match!==element){evt=$.extend(createProxy(e),{currentTarget:match,liveFired:element});return(autoRemove||callback).apply(match,[evt].concat(slice.call(arguments,1)))}};add(element,event,callback,data,selector,delegator||autoRemove)})};$.fn.off=function(event,selector,callback){var $this=this;if(event&&!isString(event)){$.each(event,function(type,fn){$this.off(type,selector,fn)});return $this}if(!isString(selector)&&!isFunction(callback)&&callback!==false)callback=selector,selector=undefined;if(callback===false)callback=returnFalse;return $this.each(function(){remove(this,event,callback,selector)})};$.fn.trigger=function(event,args){event=isString(event)||$.isPlainObject(event)?$.Event(event):compatible(event);event._args=args;return this.each(function(){if(event.type in focus&&typeof this[event.type]=="function")this[event.type]();else if("dispatchEvent"in this)this.dispatchEvent(event);else $(this).triggerHandler(event,args)})};$.fn.triggerHandler=function(event,args){var e,result;this.each(function(i,element){e=createProxy(isString(event)?$.Event(event):event);e._args=args;e.target=element;$.each(findHandlers(element,event.type||event),function(i,handler){result=handler.proxy(e);if(e.isImmediatePropagationStopped())return false})});return result};("focusin focusout focus blur load resize scroll unload click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select keydown keypress keyup error").split(" ").forEach(function(event){$.fn[event]=function(callback){return 0 in arguments?this.bind(event,callback):this.trigger(event)}});$.Event=function(type,props){if(!isString(type))props=type,type=props.type;var event=document.createEvent(specialEvents[type]||"Events"),bubbles=true;if(props)for(var name in props)name=="bubbles"?bubbles=!!props[name]:event[name]=props[name];event.initEvent(type,bubbles,true);return compatible(event)}})(Zepto);(function($){var jsonpID=0,document=window.document,key,name,rscript=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,scriptTypeRE=/^(?:text|application)\/javascript/i,xmlTypeRE=/^(?:text|application)\/xml/i,jsonType="application/json",htmlType="text/html",blankRE=/^\s*$/,originAnchor=document.createElement("a");originAnchor.href=window.location.href;function triggerAndReturn(context,eventName,data){var event=$.Event(eventName);$(context).trigger(event,data);return!event.isDefaultPrevented()}function triggerGlobal(settings,context,eventName,data){if(settings.global)return triggerAndReturn(context||document,eventName,data)}$.active=0;function ajaxStart(settings){if(settings.global&&$.active++===0)triggerGlobal(settings,null,"ajaxStart")}function ajaxStop(settings){if(settings.global&&!--$.active)triggerGlobal(settings,null,"ajaxStop")}function ajaxBeforeSend(xhr,settings){var context=settings.context;if(settings.beforeSend.call(context,xhr,settings)===false||triggerGlobal(settings,context,"ajaxBeforeSend",[xhr,settings])===false)return false;triggerGlobal(settings,context,"ajaxSend",[xhr,settings])}function ajaxSuccess(data,xhr,settings,deferred){var context=settings.context,status="success";settings.success.call(context,data,status,xhr);if(deferred)deferred.resolveWith(context,[data,status,xhr]);triggerGlobal(settings,context,"ajaxSuccess",[xhr,settings,data]);ajaxComplete(status,xhr,settings)}function ajaxError(error,type,xhr,settings,deferred){var context=settings.context;settings.error.call(context,xhr,type,error);if(deferred)deferred.rejectWith(context,[xhr,type,error]);triggerGlobal(settings,context,"ajaxError",[xhr,settings,error||type]);ajaxComplete(type,xhr,settings)}function ajaxComplete(status,xhr,settings){var context=settings.context;settings.complete.call(context,xhr,status);triggerGlobal(settings,context,"ajaxComplete",[xhr,settings]);ajaxStop(settings)}function empty(){}$.ajaxJSONP=function(options,deferred){if(!("type"in options))return $.ajax(options);var _callbackName=options.jsonpCallback,callbackName=($.isFunction(_callbackName)?_callbackName():_callbackName)||"jsonp"+ ++jsonpID,script=document.createElement("script"),originalCallback=window[callbackName],responseData,abort=function(errorType){$(script).triggerHandler("error",errorType||"abort")},xhr={abort:abort},abortTimeout;if(deferred)deferred.promise(xhr);$(script).on("load error",function(e,errorType){clearTimeout(abortTimeout);$(script).off().remove();if(e.type=="error"||!responseData){ajaxError(null,errorType||"error",xhr,options,deferred)}else{ajaxSuccess(responseData[0],xhr,options,deferred)}window[callbackName]=originalCallback;if(responseData&&$.isFunction(originalCallback))originalCallback(responseData[0]);originalCallback=responseData=undefined});if(ajaxBeforeSend(xhr,options)===false){abort("abort");return xhr}window[callbackName]=function(){responseData=arguments};script.src=options.url.replace(/\?(.+)=\?/,"?$1="+callbackName);document.head.appendChild(script);if(options.timeout>0)abortTimeout=setTimeout(function(){abort("timeout")},options.timeout);return xhr};$.ajaxSettings={type:"GET",beforeSend:empty,success:empty,error:empty,complete:empty,context:null,global:true,xhr:function(){return new window.XMLHttpRequest},accepts:{script:"text/javascript, application/javascript, application/x-javascript",json:jsonType,xml:"application/xml, text/xml",html:htmlType,text:"text/plain"},crossDomain:false,timeout:0,processData:true,cache:true};function mimeToDataType(mime){if(mime)mime=mime.split(";",2)[0];return mime&&(mime==htmlType?"html":mime==jsonType?"json":scriptTypeRE.test(mime)?"script":xmlTypeRE.test(mime)&&"xml")||"text";
}function appendQuery(url,query){if(query=="")return url;return(url+"&"+query).replace(/[&?]{1,2}/,"?")}function serializeData(options){if(options.processData&&options.data&&$.type(options.data)!="string")options.data=$.param(options.data,options.traditional);if(options.data&&(!options.type||options.type.toUpperCase()=="GET"))options.url=appendQuery(options.url,options.data),options.data=undefined}$.ajax=function(options){var settings=$.extend({},options||{}),deferred=$.Deferred&&$.Deferred(),urlAnchor;for(key in $.ajaxSettings)if(settings[key]===undefined)settings[key]=$.ajaxSettings[key];ajaxStart(settings);if(!settings.crossDomain){urlAnchor=document.createElement("a");urlAnchor.href=settings.url;urlAnchor.href=urlAnchor.href;settings.crossDomain=originAnchor.protocol+"//"+originAnchor.host!==urlAnchor.protocol+"//"+urlAnchor.host}if(!settings.url)settings.url=window.location.toString();serializeData(settings);var dataType=settings.dataType,hasPlaceholder=/\?.+=\?/.test(settings.url);if(hasPlaceholder)dataType="jsonp";if(settings.cache===false||(!options||options.cache!==true)&&("script"==dataType||"jsonp"==dataType))settings.url=appendQuery(settings.url,"_="+Date.now());if("jsonp"==dataType){if(!hasPlaceholder)settings.url=appendQuery(settings.url,settings.jsonp?settings.jsonp+"=?":settings.jsonp===false?"":"callback=?");return $.ajaxJSONP(settings,deferred)}var mime=settings.accepts[dataType],headers={},setHeader=function(name,value){headers[name.toLowerCase()]=[name,value]},protocol=/^([\w-]+:)\/\//.test(settings.url)?RegExp.$1:window.location.protocol,xhr=settings.xhr(),nativeSetHeader=xhr.setRequestHeader,abortTimeout;if(deferred)deferred.promise(xhr);if(!settings.crossDomain)setHeader("X-Requested-With","XMLHttpRequest");setHeader("Accept",mime||"*/*");if(mime=settings.mimeType||mime){if(mime.indexOf(",")>-1)mime=mime.split(",",2)[0];xhr.overrideMimeType&&xhr.overrideMimeType(mime)}if(settings.contentType||settings.contentType!==false&&settings.data&&settings.type.toUpperCase()!="GET")setHeader("Content-Type",settings.contentType||"application/x-www-form-urlencoded");if(settings.headers)for(name in settings.headers)setHeader(name,settings.headers[name]);xhr.setRequestHeader=setHeader;xhr.onreadystatechange=function(){if(xhr.readyState==4){xhr.onreadystatechange=empty;clearTimeout(abortTimeout);var result,error=false;if(xhr.status>=200&&xhr.status<300||xhr.status==304||xhr.status==0&&protocol=="file:"){dataType=dataType||mimeToDataType(settings.mimeType||xhr.getResponseHeader("content-type"));result=xhr.responseText;try{if(dataType=="script")(1,eval)(result);else if(dataType=="xml")result=xhr.responseXML;else if(dataType=="json")result=blankRE.test(result)?null:$.parseJSON(result)}catch(e){error=e}if(error)ajaxError(error,"parsererror",xhr,settings,deferred);else ajaxSuccess(result,xhr,settings,deferred)}else{ajaxError(xhr.statusText||null,xhr.status?"error":"abort",xhr,settings,deferred)}}};if(ajaxBeforeSend(xhr,settings)===false){xhr.abort();ajaxError(null,"abort",xhr,settings,deferred);return xhr}if(settings.xhrFields)for(name in settings.xhrFields)xhr[name]=settings.xhrFields[name];var async="async"in settings?settings.async:true;xhr.open(settings.type,settings.url,async,settings.username,settings.password);for(name in headers)nativeSetHeader.apply(xhr,headers[name]);if(settings.timeout>0)abortTimeout=setTimeout(function(){xhr.onreadystatechange=empty;xhr.abort();ajaxError(null,"timeout",xhr,settings,deferred)},settings.timeout);xhr.send(settings.data?settings.data:null);return xhr};function parseArguments(url,data,success,dataType){if($.isFunction(data))dataType=success,success=data,data=undefined;if(!$.isFunction(success))dataType=success,success=undefined;return{url:url,data:data,success:success,dataType:dataType}}$.get=function(){return $.ajax(parseArguments.apply(null,arguments))};$.post=function(){var options=parseArguments.apply(null,arguments);options.type="POST";return $.ajax(options)};$.getJSON=function(){var options=parseArguments.apply(null,arguments);options.dataType="json";return $.ajax(options)};$.fn.load=function(url,data,success){if(!this.length)return this;var self=this,parts=url.split(/\s/),selector,options=parseArguments(url,data,success),callback=options.success;if(parts.length>1)options.url=parts[0],selector=parts[1];options.success=function(response){self.html(selector?$("<div>").html(response.replace(rscript,"")).find(selector):response);callback&&callback.apply(self,arguments)};$.ajax(options);return this};var escape=encodeURIComponent;function serialize(params,obj,traditional,scope){var type,array=$.isArray(obj),hash=$.isPlainObject(obj);$.each(obj,function(key,value){type=$.type(value);if(scope)key=traditional?scope:scope+"["+(hash||type=="object"||type=="array"?key:"")+"]";if(!scope&&array)params.add(value.name,value.value);else if(type=="array"||!traditional&&type=="object")serialize(params,value,traditional,key);else params.add(key,value)})}$.param=function(obj,traditional){var params=[];params.add=function(key,value){if($.isFunction(value))value=value();if(value==null)value="";this.push(escape(key)+"="+escape(value))};serialize(params,obj,traditional);return params.join("&").replace(/%20/g,"+")}})(Zepto);(function($){$.fn.serializeArray=function(){var name,type,result=[],add=function(value){if(value.forEach)return value.forEach(add);result.push({name:name,value:value})};if(this[0])$.each(this[0].elements,function(_,field){type=field.type,name=field.name;if(name&&field.nodeName.toLowerCase()!="fieldset"&&!field.disabled&&type!="submit"&&type!="reset"&&type!="button"&&type!="file"&&(type!="radio"&&type!="checkbox"||field.checked))add($(field).val())});return result};$.fn.serialize=function(){var result=[];this.serializeArray().forEach(function(elm){result.push(encodeURIComponent(elm.name)+"="+encodeURIComponent(elm.value))});return result.join("&")};$.fn.submit=function(callback){if(0 in arguments)this.bind("submit",callback);else if(this.length){var event=$.Event("submit");this.eq(0).trigger(event);if(!event.isDefaultPrevented())this.get(0).submit()}return this}})(Zepto);(function($){if(!("__proto__"in{})){$.extend($.zepto,{Z:function(dom,selector){dom=dom||[];$.extend(dom,$.fn);dom.selector=selector||"";dom.__Z=true;return dom},isZ:function(object){return $.type(object)==="array"&&"__Z"in object}})}try{getComputedStyle(undefined)}catch(e){var nativeGetComputedStyle=getComputedStyle;window.getComputedStyle=function(element){try{return nativeGetComputedStyle(element)}catch(e){return null}}}})(Zepto);module.exports=Zepto},{}],2:[function(require,module,exports){var $=require("bc-zepto");$("#J_target").html("hello world")},{"bc-zepto":1}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvYmMtemVwdG8vZGlzdC96ZXB0by5qcyIsImEuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsIlplcHRvIiwidW5kZWZpbmVkIiwia2V5IiwiJCIsImNsYXNzTGlzdCIsImVtcHR5QXJyYXkiLCJzbGljZSIsImZpbHRlciIsImRvY3VtZW50Iiwid2luZG93IiwiZWxlbWVudERpc3BsYXkiLCJjbGFzc0NhY2hlIiwiY3NzTnVtYmVyIiwiY29sdW1uLWNvdW50IiwiY29sdW1ucyIsImZvbnQtd2VpZ2h0IiwibGluZS1oZWlnaHQiLCJvcGFjaXR5Iiwiei1pbmRleCIsInpvb20iLCJmcmFnbWVudFJFIiwic2luZ2xlVGFnUkUiLCJ0YWdFeHBhbmRlclJFIiwicm9vdE5vZGVSRSIsImNhcGl0YWxSRSIsIm1ldGhvZEF0dHJpYnV0ZXMiLCJhZGphY2VuY3lPcGVyYXRvcnMiLCJ0YWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJ0YWJsZVJvdyIsImNvbnRhaW5lcnMiLCJ0ciIsInRib2R5IiwidGhlYWQiLCJ0Zm9vdCIsInRkIiwidGgiLCIqIiwicmVhZHlSRSIsInNpbXBsZVNlbGVjdG9yUkUiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJ6ZXB0byIsImNhbWVsaXplIiwidW5pcSIsInRlbXBQYXJlbnQiLCJwcm9wTWFwIiwidGFiaW5kZXgiLCJyZWFkb25seSIsImZvciIsImNsYXNzIiwibWF4bGVuZ3RoIiwiY2VsbHNwYWNpbmciLCJjZWxscGFkZGluZyIsInJvd3NwYW4iLCJjb2xzcGFuIiwidXNlbWFwIiwiZnJhbWVib3JkZXIiLCJjb250ZW50ZWRpdGFibGUiLCJpc0FycmF5IiwiQXJyYXkiLCJvYmplY3QiLCJtYXRjaGVzIiwiZWxlbWVudCIsInNlbGVjdG9yIiwibm9kZVR5cGUiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2giLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwidGVtcCIsImFwcGVuZENoaWxkIiwicXNhIiwiaW5kZXhPZiIsInJlbW92ZUNoaWxkIiwidHlwZSIsIm9iaiIsIlN0cmluZyIsImlzRnVuY3Rpb24iLCJ2YWx1ZSIsImlzV2luZG93IiwiaXNEb2N1bWVudCIsIkRPQ1VNRU5UX05PREUiLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImxpa2VBcnJheSIsImNvbXBhY3QiLCJhcnJheSIsIml0ZW0iLCJmbGF0dGVuIiwiZm4iLCJjb25jYXQiLCJhcHBseSIsInN0ciIsInJlcGxhY2UiLCJjaHIiLCJ0b1VwcGVyQ2FzZSIsImRhc2hlcml6ZSIsInRvTG93ZXJDYXNlIiwiaWR4IiwiY2xhc3NSRSIsIm5hbWUiLCJSZWdFeHAiLCJtYXliZUFkZFB4IiwiZGVmYXVsdERpc3BsYXkiLCJub2RlTmFtZSIsImRpc3BsYXkiLCJib2R5IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJjaGlsZHJlbiIsIm1hcCIsImNoaWxkTm9kZXMiLCJub2RlIiwiZnJhZ21lbnQiLCJodG1sIiwicHJvcGVydGllcyIsImRvbSIsIm5vZGVzIiwiY29udGFpbmVyIiwidGVzdCIsIiQxIiwiaW5uZXJIVE1MIiwiZWFjaCIsInRoaXMiLCJhdHRyIiwiWiIsIl9fcHJvdG9fXyIsImlzWiIsImluaXQiLCJjb250ZXh0IiwidHJpbSIsImZpbmQiLCJyZWFkeSIsImV4dGVuZCIsInRhcmdldCIsInNvdXJjZSIsImRlZXAiLCJhcmdzIiwiYXJndW1lbnRzIiwic2hpZnQiLCJmb3JFYWNoIiwiYXJnIiwiZm91bmQiLCJtYXliZUlEIiwibWF5YmVDbGFzcyIsIm5hbWVPbmx5IiwiaXNTaW1wbGUiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXJlZCIsImNvbnRhaW5zIiwiZG9jdW1lbnRFbGVtZW50IiwiZnVuY0FyZyIsInBheWxvYWQiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjbGFzc05hbWUiLCJrbGFzcyIsInN2ZyIsImJhc2VWYWwiLCJkZXNlcmlhbGl6ZVZhbHVlIiwicGFyc2VKU09OIiwiaXNFbXB0eU9iamVjdCIsImluQXJyYXkiLCJlbGVtIiwiY2FtZWxDYXNlIiwidXVpZCIsInN1cHBvcnQiLCJleHByIiwiZWxlbWVudHMiLCJjYWxsYmFjayIsInZhbHVlcyIsInB1c2giLCJncmVwIiwiSlNPTiIsInBhcnNlIiwic3BsaXQiLCJyZWR1Y2UiLCJzb3J0IiwiZWwiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldCIsInRvQXJyYXkiLCJzaXplIiwicmVtb3ZlIiwiZXZlcnkiLCJub3QiLCJhZGQiLCJpcyIsImV4Y2x1ZGVzIiwiaGFzIiwiZXEiLCJmaXJzdCIsImxhc3QiLCJyZXN1bHQiLCIkdGhpcyIsInNvbWUiLCJjbG9zZXN0IiwiY29sbGVjdGlvbiIsInBhcmVudHMiLCJhbmNlc3RvcnMiLCJwbHVjayIsImNvbnRlbnRzIiwic2libGluZ3MiLCJjaGlsZCIsImVtcHR5IiwicHJvcGVydHkiLCJzaG93Iiwic3R5bGUiLCJyZXBsYWNlV2l0aCIsIm5ld0NvbnRlbnQiLCJiZWZvcmUiLCJ3cmFwIiwic3RydWN0dXJlIiwiZnVuYyIsImNsb25lIiwiaW5kZXgiLCJ3cmFwQWxsIiwiY2xvbmVOb2RlIiwiYXBwZW5kIiwid3JhcElubmVyIiwic2VsZiIsInVud3JhcCIsImhpZGUiLCJjc3MiLCJ0b2dnbGUiLCJzZXR0aW5nIiwicHJldiIsIm5leHQiLCJvcmlnaW5IdG1sIiwidGV4dCIsIm5ld1RleHQiLCJ0ZXh0Q29udGVudCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHIiLCJhdHRyaWJ1dGUiLCJwcm9wIiwiZGF0YSIsImF0dHJOYW1lIiwidmFsIiwibXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9mZnNldCIsImNvb3JkaW5hdGVzIiwiY29vcmRzIiwicGFyZW50T2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicHJvcHMiLCJ0b3AiLCJsZWZ0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsIndpZHRoIiwiTWF0aCIsInJvdW5kIiwiaGVpZ2h0IiwiY29tcHV0ZWRTdHlsZSIsIl8iLCJyZW1vdmVQcm9wZXJ0eSIsImNzc1RleHQiLCJoYXNDbGFzcyIsImFkZENsYXNzIiwiY2xzIiwibmV3TmFtZSIsImpvaW4iLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwid2hlbiIsIm5hbWVzIiwic2Nyb2xsVG9wIiwiaGFzU2Nyb2xsVG9wIiwic2Nyb2xsVG8iLCJzY3JvbGxYIiwic2Nyb2xsTGVmdCIsImhhc1Njcm9sbExlZnQiLCJzY3JvbGxZIiwicG9zaXRpb24iLCJwYXJzZUZsb2F0IiwiZGV0YWNoIiwiZGltZW5zaW9uIiwiZGltZW5zaW9uUHJvcGVydHkiLCJtIiwidHJhdmVyc2VOb2RlIiwiZnVuIiwibGVuIiwib3BlcmF0b3IiLCJvcGVyYXRvckluZGV4IiwiaW5zaWRlIiwiYXJnVHlwZSIsImNvcHlCeUNsb25lIiwibmV4dFNpYmxpbmciLCJmaXJzdENoaWxkIiwicGFyZW50SW5Eb2N1bWVudCIsImluc2VydEJlZm9yZSIsInNyYyIsIl96aWQiLCJpc1N0cmluZyIsImhhbmRsZXJzIiwic3BlY2lhbEV2ZW50cyIsImZvY3VzaW5TdXBwb3J0ZWQiLCJmb2N1cyIsImJsdXIiLCJob3ZlciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiY2xpY2siLCJtb3VzZWRvd24iLCJtb3VzZXVwIiwibW91c2Vtb3ZlIiwiemlkIiwiZmluZEhhbmRsZXJzIiwiZXZlbnQiLCJucyIsIm1hdGNoZXIiLCJtYXRjaGVyRm9yIiwiaGFuZGxlciIsInNlbCIsInBhcnRzIiwiZXZlbnRDYXB0dXJlIiwiY2FwdHVyZVNldHRpbmciLCJkZWwiLCJyZWFsRXZlbnQiLCJldmVudHMiLCJkZWxlZ2F0b3IiLCJjYXB0dXJlIiwiaWQiLCJzZXQiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsInByb3h5IiwiY29tcGF0aWJsZSIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiX2FyZ3MiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwcm94eUZuIiwidW5zaGlmdCIsIlR5cGVFcnJvciIsImJpbmQiLCJvbiIsInVuYmluZCIsIm9mZiIsIm9uZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImlnbm9yZVByb3BlcnRpZXMiLCJldmVudE1ldGhvZHMiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJwcmVkaWNhdGUiLCJzb3VyY2VNZXRob2QiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJnZXRQcmV2ZW50RGVmYXVsdCIsImNyZWF0ZVByb3h5Iiwib3JpZ2luYWxFdmVudCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImxpdmUiLCJkaWUiLCJhdXRvUmVtb3ZlIiwiZXZ0IiwiY3VycmVudFRhcmdldCIsImxpdmVGaXJlZCIsInRyaWdnZXIiLCJFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJ0cmlnZ2VySGFuZGxlciIsImNyZWF0ZUV2ZW50IiwiYnViYmxlcyIsImluaXRFdmVudCIsImpzb25wSUQiLCJyc2NyaXB0Iiwic2NyaXB0VHlwZVJFIiwieG1sVHlwZVJFIiwianNvblR5cGUiLCJodG1sVHlwZSIsImJsYW5rUkUiLCJvcmlnaW5BbmNob3IiLCJocmVmIiwibG9jYXRpb24iLCJ0cmlnZ2VyQW5kUmV0dXJuIiwiZXZlbnROYW1lIiwidHJpZ2dlckdsb2JhbCIsInNldHRpbmdzIiwiZ2xvYmFsIiwiYWN0aXZlIiwiYWpheFN0YXJ0IiwiYWpheFN0b3AiLCJhamF4QmVmb3JlU2VuZCIsInhociIsImJlZm9yZVNlbmQiLCJhamF4U3VjY2VzcyIsImRlZmVycmVkIiwic3RhdHVzIiwic3VjY2VzcyIsInJlc29sdmVXaXRoIiwiYWpheENvbXBsZXRlIiwiYWpheEVycm9yIiwiZXJyb3IiLCJyZWplY3RXaXRoIiwiY29tcGxldGUiLCJhamF4SlNPTlAiLCJvcHRpb25zIiwiYWpheCIsIl9jYWxsYmFja05hbWUiLCJqc29ucENhbGxiYWNrIiwiY2FsbGJhY2tOYW1lIiwic2NyaXB0Iiwib3JpZ2luYWxDYWxsYmFjayIsInJlc3BvbnNlRGF0YSIsImFib3J0IiwiZXJyb3JUeXBlIiwiYWJvcnRUaW1lb3V0IiwicHJvbWlzZSIsImNsZWFyVGltZW91dCIsInVybCIsImhlYWQiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXhTZXR0aW5ncyIsIlhNTEh0dHBSZXF1ZXN0IiwiYWNjZXB0cyIsImpzb24iLCJ4bWwiLCJjcm9zc0RvbWFpbiIsInByb2Nlc3NEYXRhIiwiY2FjaGUiLCJtaW1lVG9EYXRhVHlwZSIsIm1pbWUiLCJhcHBlbmRRdWVyeSIsInF1ZXJ5Iiwic2VyaWFsaXplRGF0YSIsInBhcmFtIiwidHJhZGl0aW9uYWwiLCJEZWZlcnJlZCIsInVybEFuY2hvciIsInByb3RvY29sIiwiaG9zdCIsImRhdGFUeXBlIiwiaGFzUGxhY2Vob2xkZXIiLCJEYXRlIiwibm93IiwianNvbnAiLCJoZWFkZXJzIiwic2V0SGVhZGVyIiwibmF0aXZlU2V0SGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsIm1pbWVUeXBlIiwib3ZlcnJpZGVNaW1lVHlwZSIsImNvbnRlbnRUeXBlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXNwb25zZVRleHQiLCJldmFsIiwicmVzcG9uc2VYTUwiLCJzdGF0dXNUZXh0IiwieGhyRmllbGRzIiwiYXN5bmMiLCJvcGVuIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInNlbmQiLCJwYXJzZUFyZ3VtZW50cyIsInBvc3QiLCJnZXRKU09OIiwibG9hZCIsInJlc3BvbnNlIiwiZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwicGFyYW1zIiwic2NvcGUiLCJoYXNoIiwic2VyaWFsaXplQXJyYXkiLCJmaWVsZCIsImRpc2FibGVkIiwiY2hlY2tlZCIsImVsbSIsInN1Ym1pdCIsIl9fWiIsIm5hdGl2ZUdldENvbXB1dGVkU3R5bGUiLDIsImJjLXplcHRvIl0sIm1hcHBpbmdzIjoiQ0FBQSxRQUFBQSxHQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEdBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxHQUFBRSxTQUFBQyxVQUFBLFlBQUFBLE9BQUEsS0FBQUYsR0FBQUMsRUFBQSxNQUFBQSxHQUFBRixHQUFBLEVBQUEsSUFBQUksRUFBQSxNQUFBQSxHQUFBSixHQUFBLEVBQUEsSUFBQUssR0FBQSxHQUFBQyxPQUFBLHVCQUFBTixFQUFBLElBQUEsTUFBQUssR0FBQUUsS0FBQSxtQkFBQUYsRUFBQSxHQUFBRyxHQUFBWCxFQUFBRyxJQUFBUyxXQUFBYixHQUFBSSxHQUFBLEdBQUFVLEtBQUFGLEVBQUFDLFFBQUEsU0FBQWQsR0FBQSxHQUFBRSxHQUFBRCxFQUFBSSxHQUFBLEdBQUFMLEVBQUEsT0FBQUksR0FBQUYsRUFBQUEsRUFBQUYsSUFBQWEsRUFBQUEsRUFBQUMsUUFBQWQsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxNQUFBRCxHQUFBRyxHQUFBUyxRQUFBLEdBQUFMLFNBQUFELFVBQUEsWUFBQUEsT0FBQSxLQUFBLEdBQUFILEdBQUEsRUFBQUEsRUFBQUYsRUFBQWEsT0FBQVgsSUFBQUQsRUFBQUQsRUFBQUUsR0FBQSxPQUFB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QUNBLElBQ0EsTUFBQThhLHdCQUFBOWEsU0FDQSxNQUFBbEYsR0FDQSxNQUFBLFdBSUFtQixNQUNBRCxRQUFBSixRQUFBSyxXQ0dNOGUsR0FBRyxTQUFTemYsUUFBUVUsT0FBT0osU0F0akRqQyxHQUFBUSxHQUFBZCxRQUFBLFdBRUFjLEdBQUEsYUFBQXNILEtBQUEsaUJBeWpER3NYLFdBQVcsU0FBUyIsImZpbGUiOiJhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiBaZXB0byB2MS4xLjZiIC0gemVwdG8gZXZlbnQgYWpheCBmb3JtIGllIC0gemVwdG9qcy5jb20vbGljZW5zZSAqL1xuXG52YXIgWmVwdG8gPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1bmRlZmluZWQsIGtleSwgJCwgY2xhc3NMaXN0LCBlbXB0eUFycmF5ID0gW10sIHNsaWNlID0gZW1wdHlBcnJheS5zbGljZSwgZmlsdGVyID0gZW1wdHlBcnJheS5maWx0ZXIsXG4gICAgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG4gICAgZWxlbWVudERpc3BsYXkgPSB7fSwgY2xhc3NDYWNoZSA9IHt9LFxuICAgIGNzc051bWJlciA9IHsgJ2NvbHVtbi1jb3VudCc6IDEsICdjb2x1bW5zJzogMSwgJ2ZvbnQtd2VpZ2h0JzogMSwgJ2xpbmUtaGVpZ2h0JzogMSwnb3BhY2l0eSc6IDEsICd6LWluZGV4JzogMSwgJ3pvb20nOiAxIH0sXG4gICAgZnJhZ21lbnRSRSA9IC9eXFxzKjwoXFx3K3whKVtePl0qPi8sXG4gICAgc2luZ2xlVGFnUkUgPSAvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8sXG4gICAgdGFnRXhwYW5kZXJSRSA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9pZyxcbiAgICByb290Tm9kZVJFID0gL14oPzpib2R5fGh0bWwpJC9pLFxuICAgIGNhcGl0YWxSRSA9IC8oW0EtWl0pL2csXG5cbiAgICAvLyBzcGVjaWFsIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgZ2V0L3NldCB2aWEgbWV0aG9kIGNhbGxzXG4gICAgbWV0aG9kQXR0cmlidXRlcyA9IFsndmFsJywgJ2NzcycsICdodG1sJywgJ3RleHQnLCAnZGF0YScsICd3aWR0aCcsICdoZWlnaHQnLCAnb2Zmc2V0J10sXG5cbiAgICBhZGphY2VuY3lPcGVyYXRvcnMgPSBbICdhZnRlcicsICdwcmVwZW5kJywgJ2JlZm9yZScsICdhcHBlbmQnIF0sXG4gICAgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpLFxuICAgIHRhYmxlUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKSxcbiAgICBjb250YWluZXJzID0ge1xuICAgICAgJ3RyJzogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKSxcbiAgICAgICd0Ym9keSc6IHRhYmxlLCAndGhlYWQnOiB0YWJsZSwgJ3Rmb290JzogdGFibGUsXG4gICAgICAndGQnOiB0YWJsZVJvdywgJ3RoJzogdGFibGVSb3csXG4gICAgICAnKic6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfSxcbiAgICByZWFkeVJFID0gL2NvbXBsZXRlfGxvYWRlZHxpbnRlcmFjdGl2ZS8sXG4gICAgc2ltcGxlU2VsZWN0b3JSRSA9IC9eW1xcdy1dKiQvLFxuICAgIGNsYXNzMnR5cGUgPSB7fSxcbiAgICB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmcsXG4gICAgemVwdG8gPSB7fSxcbiAgICBjYW1lbGl6ZSwgdW5pcSxcbiAgICB0ZW1wUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgcHJvcE1hcCA9IHtcbiAgICAgICd0YWJpbmRleCc6ICd0YWJJbmRleCcsXG4gICAgICAncmVhZG9ubHknOiAncmVhZE9ubHknLFxuICAgICAgJ2Zvcic6ICdodG1sRm9yJyxcbiAgICAgICdjbGFzcyc6ICdjbGFzc05hbWUnLFxuICAgICAgJ21heGxlbmd0aCc6ICdtYXhMZW5ndGgnLFxuICAgICAgJ2NlbGxzcGFjaW5nJzogJ2NlbGxTcGFjaW5nJyxcbiAgICAgICdjZWxscGFkZGluZyc6ICdjZWxsUGFkZGluZycsXG4gICAgICAncm93c3Bhbic6ICdyb3dTcGFuJyxcbiAgICAgICdjb2xzcGFuJzogJ2NvbFNwYW4nLFxuICAgICAgJ3VzZW1hcCc6ICd1c2VNYXAnLFxuICAgICAgJ2ZyYW1lYm9yZGVyJzogJ2ZyYW1lQm9yZGVyJyxcbiAgICAgICdjb250ZW50ZWRpdGFibGUnOiAnY29udGVudEVkaXRhYmxlJ1xuICAgIH0sXG4gICAgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHxcbiAgICAgIGZ1bmN0aW9uKG9iamVjdCl7IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBBcnJheSB9XG5cbiAgemVwdG8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgaWYgKCFzZWxlY3RvciB8fCAhZWxlbWVudCB8fCBlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSByZXR1cm4gZmFsc2VcbiAgICB2YXIgbWF0Y2hlc1NlbGVjdG9yID0gZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQubWF0Y2hlc1NlbGVjdG9yXG4gICAgaWYgKG1hdGNoZXNTZWxlY3RvcikgcmV0dXJuIG1hdGNoZXNTZWxlY3Rvci5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxuICAgIC8vIGZhbGwgYmFjayB0byBwZXJmb3JtaW5nIGEgc2VsZWN0b3I6XG4gICAgdmFyIG1hdGNoLCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGUsIHRlbXAgPSAhcGFyZW50XG4gICAgaWYgKHRlbXApIChwYXJlbnQgPSB0ZW1wUGFyZW50KS5hcHBlbmRDaGlsZChlbGVtZW50KVxuICAgIG1hdGNoID0gfnplcHRvLnFzYShwYXJlbnQsIHNlbGVjdG9yKS5pbmRleE9mKGVsZW1lbnQpXG4gICAgdGVtcCAmJiB0ZW1wUGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpXG4gICAgcmV0dXJuIG1hdGNoXG4gIH1cblxuICBmdW5jdGlvbiB0eXBlKG9iaikge1xuICAgIHJldHVybiBvYmogPT0gbnVsbCA/IFN0cmluZyhvYmopIDpcbiAgICAgIGNsYXNzMnR5cGVbdG9TdHJpbmcuY2FsbChvYmopXSB8fCBcIm9iamVjdFwiXG4gIH1cblxuICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB0eXBlKHZhbHVlKSA9PSBcImZ1bmN0aW9uXCIgfVxuICBmdW5jdGlvbiBpc1dpbmRvdyhvYmopICAgICB7IHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT0gb2JqLndpbmRvdyB9XG4gIGZ1bmN0aW9uIGlzRG9jdW1lbnQob2JqKSAgIHsgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5ub2RlVHlwZSA9PSBvYmouRE9DVU1FTlRfTk9ERSB9XG4gIGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikgICAgIHsgcmV0dXJuIHR5cGUob2JqKSA9PSBcIm9iamVjdFwiIH1cbiAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiAhaXNXaW5kb3cob2JqKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PSBPYmplY3QucHJvdG90eXBlXG4gIH1cbiAgZnVuY3Rpb24gbGlrZUFycmF5KG9iaikgeyByZXR1cm4gdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHsgcmV0dXJuIGZpbHRlci5jYWxsKGFycmF5LCBmdW5jdGlvbihpdGVtKXsgcmV0dXJuIGl0ZW0gIT0gbnVsbCB9KSB9XG4gIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHsgcmV0dXJuIGFycmF5Lmxlbmd0aCA+IDAgPyAkLmZuLmNvbmNhdC5hcHBseShbXSwgYXJyYXkpIDogYXJyYXkgfVxuICBjYW1lbGl6ZSA9IGZ1bmN0aW9uKHN0cil7IHJldHVybiBzdHIucmVwbGFjZSgvLSsoLik/L2csIGZ1bmN0aW9uKG1hdGNoLCBjaHIpeyByZXR1cm4gY2hyID8gY2hyLnRvVXBwZXJDYXNlKCkgOiAnJyB9KSB9XG4gIGZ1bmN0aW9uIGRhc2hlcml6ZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLzo6L2csICcvJylcbiAgICAgICAgICAgLnJlcGxhY2UoLyhbQS1aXSspKFtBLVpdW2Etel0pL2csICckMV8kMicpXG4gICAgICAgICAgIC5yZXBsYWNlKC8oW2EtelxcZF0pKFtBLVpdKS9nLCAnJDFfJDInKVxuICAgICAgICAgICAucmVwbGFjZSgvXy9nLCAnLScpXG4gICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gIH1cbiAgdW5pcSA9IGZ1bmN0aW9uKGFycmF5KXsgcmV0dXJuIGZpbHRlci5jYWxsKGFycmF5LCBmdW5jdGlvbihpdGVtLCBpZHgpeyByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtKSA9PSBpZHggfSkgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzUkUobmFtZSkge1xuICAgIHJldHVybiBuYW1lIGluIGNsYXNzQ2FjaGUgP1xuICAgICAgY2xhc3NDYWNoZVtuYW1lXSA6IChjbGFzc0NhY2hlW25hbWVdID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIG5hbWUgKyAnKFxcXFxzfCQpJykpXG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUFkZFB4KG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiAmJiAhY3NzTnVtYmVyW2Rhc2hlcml6ZShuYW1lKV0pID8gdmFsdWUgKyBcInB4XCIgOiB2YWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkobm9kZU5hbWUpIHtcbiAgICB2YXIgZWxlbWVudCwgZGlzcGxheVxuICAgIGlmICghZWxlbWVudERpc3BsYXlbbm9kZU5hbWVdKSB7XG4gICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSlcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudClcbiAgICAgIGRpc3BsYXkgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKFwiZGlzcGxheVwiKVxuICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpXG4gICAgICBkaXNwbGF5ID09IFwibm9uZVwiICYmIChkaXNwbGF5ID0gXCJibG9ja1wiKVxuICAgICAgZWxlbWVudERpc3BsYXlbbm9kZU5hbWVdID0gZGlzcGxheVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudERpc3BsYXlbbm9kZU5hbWVdXG4gIH1cblxuICBmdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuICdjaGlsZHJlbicgaW4gZWxlbWVudCA/XG4gICAgICBzbGljZS5jYWxsKGVsZW1lbnQuY2hpbGRyZW4pIDpcbiAgICAgICQubWFwKGVsZW1lbnQuY2hpbGROb2RlcywgZnVuY3Rpb24obm9kZSl7IGlmIChub2RlLm5vZGVUeXBlID09IDEpIHJldHVybiBub2RlIH0pXG4gIH1cblxuICAvLyBgJC56ZXB0by5mcmFnbWVudGAgdGFrZXMgYSBodG1sIHN0cmluZyBhbmQgYW4gb3B0aW9uYWwgdGFnIG5hbWVcbiAgLy8gdG8gZ2VuZXJhdGUgRE9NIG5vZGVzIG5vZGVzIGZyb20gdGhlIGdpdmVuIGh0bWwgc3RyaW5nLlxuICAvLyBUaGUgZ2VuZXJhdGVkIERPTSBub2RlcyBhcmUgcmV0dXJuZWQgYXMgYW4gYXJyYXkuXG4gIC8vIFRoaXMgZnVuY3Rpb24gY2FuIGJlIG92ZXJyaWRlbiBpbiBwbHVnaW5zIGZvciBleGFtcGxlIHRvIG1ha2VcbiAgLy8gaXQgY29tcGF0aWJsZSB3aXRoIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCB0aGUgRE9NIGZ1bGx5LlxuICB6ZXB0by5mcmFnbWVudCA9IGZ1bmN0aW9uKGh0bWwsIG5hbWUsIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgZG9tLCBub2RlcywgY29udGFpbmVyXG5cbiAgICAvLyBBIHNwZWNpYWwgY2FzZSBvcHRpbWl6YXRpb24gZm9yIGEgc2luZ2xlIHRhZ1xuICAgIGlmIChzaW5nbGVUYWdSRS50ZXN0KGh0bWwpKSBkb20gPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoUmVnRXhwLiQxKSlcblxuICAgIGlmICghZG9tKSB7XG4gICAgICBpZiAoaHRtbC5yZXBsYWNlKSBodG1sID0gaHRtbC5yZXBsYWNlKHRhZ0V4cGFuZGVyUkUsIFwiPCQxPjwvJDI+XCIpXG4gICAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSBuYW1lID0gZnJhZ21lbnRSRS50ZXN0KGh0bWwpICYmIFJlZ0V4cC4kMVxuICAgICAgaWYgKCEobmFtZSBpbiBjb250YWluZXJzKSkgbmFtZSA9ICcqJ1xuXG4gICAgICBjb250YWluZXIgPSBjb250YWluZXJzW25hbWVdXG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJycgKyBodG1sXG4gICAgICBkb20gPSAkLmVhY2goc2xpY2UuY2FsbChjb250YWluZXIuY2hpbGROb2RlcyksIGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoaXNQbGFpbk9iamVjdChwcm9wZXJ0aWVzKSkge1xuICAgICAgbm9kZXMgPSAkKGRvbSlcbiAgICAgICQuZWFjaChwcm9wZXJ0aWVzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChtZXRob2RBdHRyaWJ1dGVzLmluZGV4T2Yoa2V5KSA+IC0xKSBub2Rlc1trZXldKHZhbHVlKVxuICAgICAgICBlbHNlIG5vZGVzLmF0dHIoa2V5LCB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGRvbVxuICB9XG5cbiAgLy8gYCQuemVwdG8uWmAgc3dhcHMgb3V0IHRoZSBwcm90b3R5cGUgb2YgdGhlIGdpdmVuIGBkb21gIGFycmF5XG4gIC8vIG9mIG5vZGVzIHdpdGggYCQuZm5gIGFuZCB0aHVzIHN1cHBseWluZyBhbGwgdGhlIFplcHRvIGZ1bmN0aW9uc1xuICAvLyB0byB0aGUgYXJyYXkuIE5vdGUgdGhhdCBgX19wcm90b19fYCBpcyBub3Qgc3VwcG9ydGVkIG9uIEludGVybmV0XG4gIC8vIEV4cGxvcmVyLiBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGVuIGluIHBsdWdpbnMuXG4gIHplcHRvLlogPSBmdW5jdGlvbihkb20sIHNlbGVjdG9yKSB7XG4gICAgZG9tID0gZG9tIHx8IFtdXG4gICAgZG9tLl9fcHJvdG9fXyA9ICQuZm5cbiAgICBkb20uc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAnJ1xuICAgIHJldHVybiBkb21cbiAgfVxuXG4gIC8vIGAkLnplcHRvLmlzWmAgc2hvdWxkIHJldHVybiBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBpcyBhIFplcHRvXG4gIC8vIGNvbGxlY3Rpb24uIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZW4gaW4gcGx1Z2lucy5cbiAgemVwdG8uaXNaID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHplcHRvLlpcbiAgfVxuXG4gIC8vIGAkLnplcHRvLmluaXRgIGlzIFplcHRvJ3MgY291bnRlcnBhcnQgdG8galF1ZXJ5J3MgYCQuZm4uaW5pdGAgYW5kXG4gIC8vIHRha2VzIGEgQ1NTIHNlbGVjdG9yIGFuZCBhbiBvcHRpb25hbCBjb250ZXh0IChhbmQgaGFuZGxlcyB2YXJpb3VzXG4gIC8vIHNwZWNpYWwgY2FzZXMpLlxuICAvLyBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGVuIGluIHBsdWdpbnMuXG4gIHplcHRvLmluaXQgPSBmdW5jdGlvbihzZWxlY3RvciwgY29udGV4dCkge1xuICAgIHZhciBkb21cbiAgICAvLyBJZiBub3RoaW5nIGdpdmVuLCByZXR1cm4gYW4gZW1wdHkgWmVwdG8gY29sbGVjdGlvblxuICAgIGlmICghc2VsZWN0b3IpIHJldHVybiB6ZXB0by5aKClcbiAgICAvLyBPcHRpbWl6ZSBmb3Igc3RyaW5nIHNlbGVjdG9yc1xuICAgIGVsc2UgaWYgKHR5cGVvZiBzZWxlY3RvciA9PSAnc3RyaW5nJykge1xuICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci50cmltKClcbiAgICAgIC8vIElmIGl0J3MgYSBodG1sIGZyYWdtZW50LCBjcmVhdGUgbm9kZXMgZnJvbSBpdFxuICAgICAgLy8gTm90ZTogSW4gYm90aCBDaHJvbWUgMjEgYW5kIEZpcmVmb3ggMTUsIERPTSBlcnJvciAxMlxuICAgICAgLy8gaXMgdGhyb3duIGlmIHRoZSBmcmFnbWVudCBkb2Vzbid0IGJlZ2luIHdpdGggPFxuICAgICAgaWYgKHNlbGVjdG9yWzBdID09ICc8JyAmJiBmcmFnbWVudFJFLnRlc3Qoc2VsZWN0b3IpKVxuICAgICAgICBkb20gPSB6ZXB0by5mcmFnbWVudChzZWxlY3RvciwgUmVnRXhwLiQxLCBjb250ZXh0KSwgc2VsZWN0b3IgPSBudWxsXG4gICAgICAvLyBJZiB0aGVyZSdzIGEgY29udGV4dCwgY3JlYXRlIGEgY29sbGVjdGlvbiBvbiB0aGF0IGNvbnRleHQgZmlyc3QsIGFuZCBzZWxlY3RcbiAgICAgIC8vIG5vZGVzIGZyb20gdGhlcmVcbiAgICAgIGVsc2UgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuICQoY29udGV4dCkuZmluZChzZWxlY3RvcilcbiAgICAgIC8vIElmIGl0J3MgYSBDU1Mgc2VsZWN0b3IsIHVzZSBpdCB0byBzZWxlY3Qgbm9kZXMuXG4gICAgICBlbHNlIGRvbSA9IHplcHRvLnFzYShkb2N1bWVudCwgc2VsZWN0b3IpXG4gICAgfVxuICAgIC8vIElmIGEgZnVuY3Rpb24gaXMgZ2l2ZW4sIGNhbGwgaXQgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzZWxlY3RvcikpIHJldHVybiAkKGRvY3VtZW50KS5yZWFkeShzZWxlY3RvcilcbiAgICAvLyBJZiBhIFplcHRvIGNvbGxlY3Rpb24gaXMgZ2l2ZW4sIGp1c3QgcmV0dXJuIGl0XG4gICAgZWxzZSBpZiAoemVwdG8uaXNaKHNlbGVjdG9yKSkgcmV0dXJuIHNlbGVjdG9yXG4gICAgZWxzZSB7XG4gICAgICAvLyBub3JtYWxpemUgYXJyYXkgaWYgYW4gYXJyYXkgb2Ygbm9kZXMgaXMgZ2l2ZW5cbiAgICAgIGlmIChpc0FycmF5KHNlbGVjdG9yKSkgZG9tID0gY29tcGFjdChzZWxlY3RvcilcbiAgICAgIC8vIFdyYXAgRE9NIG5vZGVzLlxuICAgICAgZWxzZSBpZiAoaXNPYmplY3Qoc2VsZWN0b3IpKVxuICAgICAgICBkb20gPSBbc2VsZWN0b3JdLCBzZWxlY3RvciA9IG51bGxcbiAgICAgIC8vIElmIGl0J3MgYSBodG1sIGZyYWdtZW50LCBjcmVhdGUgbm9kZXMgZnJvbSBpdFxuICAgICAgZWxzZSBpZiAoZnJhZ21lbnRSRS50ZXN0KHNlbGVjdG9yKSlcbiAgICAgICAgZG9tID0gemVwdG8uZnJhZ21lbnQoc2VsZWN0b3IudHJpbSgpLCBSZWdFeHAuJDEsIGNvbnRleHQpLCBzZWxlY3RvciA9IG51bGxcbiAgICAgIC8vIElmIHRoZXJlJ3MgYSBjb250ZXh0LCBjcmVhdGUgYSBjb2xsZWN0aW9uIG9uIHRoYXQgY29udGV4dCBmaXJzdCwgYW5kIHNlbGVjdFxuICAgICAgLy8gbm9kZXMgZnJvbSB0aGVyZVxuICAgICAgZWxzZSBpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gJChjb250ZXh0KS5maW5kKHNlbGVjdG9yKVxuICAgICAgLy8gQW5kIGxhc3QgYnV0IG5vIGxlYXN0LCBpZiBpdCdzIGEgQ1NTIHNlbGVjdG9yLCB1c2UgaXQgdG8gc2VsZWN0IG5vZGVzLlxuICAgICAgZWxzZSBkb20gPSB6ZXB0by5xc2EoZG9jdW1lbnQsIHNlbGVjdG9yKVxuICAgIH1cbiAgICAvLyBjcmVhdGUgYSBuZXcgWmVwdG8gY29sbGVjdGlvbiBmcm9tIHRoZSBub2RlcyBmb3VuZFxuICAgIHJldHVybiB6ZXB0by5aKGRvbSwgc2VsZWN0b3IpXG4gIH1cblxuICAvLyBgJGAgd2lsbCBiZSB0aGUgYmFzZSBgWmVwdG9gIG9iamVjdC4gV2hlbiBjYWxsaW5nIHRoaXNcbiAgLy8gZnVuY3Rpb24ganVzdCBjYWxsIGAkLnplcHRvLmluaXQsIHdoaWNoIG1ha2VzIHRoZSBpbXBsZW1lbnRhdGlvblxuICAvLyBkZXRhaWxzIG9mIHNlbGVjdGluZyBub2RlcyBhbmQgY3JlYXRpbmcgWmVwdG8gY29sbGVjdGlvbnNcbiAgLy8gcGF0Y2hhYmxlIGluIHBsdWdpbnMuXG4gICQgPSBmdW5jdGlvbihzZWxlY3RvciwgY29udGV4dCl7XG4gICAgcmV0dXJuIHplcHRvLmluaXQoc2VsZWN0b3IsIGNvbnRleHQpXG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzb3VyY2UsIGRlZXApIHtcbiAgICBmb3IgKGtleSBpbiBzb3VyY2UpXG4gICAgICBpZiAoZGVlcCAmJiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgfHwgaXNBcnJheShzb3VyY2Vba2V5XSkpKSB7XG4gICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiAhaXNQbGFpbk9iamVjdCh0YXJnZXRba2V5XSkpXG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB7fVxuICAgICAgICBpZiAoaXNBcnJheShzb3VyY2Vba2V5XSkgJiYgIWlzQXJyYXkodGFyZ2V0W2tleV0pKVxuICAgICAgICAgIHRhcmdldFtrZXldID0gW11cbiAgICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgZGVlcClcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHNvdXJjZVtrZXldICE9PSB1bmRlZmluZWQpIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgfVxuXG4gIC8vIENvcHkgYWxsIGJ1dCB1bmRlZmluZWQgcHJvcGVydGllcyBmcm9tIG9uZSBvciBtb3JlXG4gIC8vIG9iamVjdHMgdG8gdGhlIGB0YXJnZXRgIG9iamVjdC5cbiAgJC5leHRlbmQgPSBmdW5jdGlvbih0YXJnZXQpe1xuICAgIHZhciBkZWVwLCBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBkZWVwID0gdGFyZ2V0XG4gICAgICB0YXJnZXQgPSBhcmdzLnNoaWZ0KClcbiAgICB9XG4gICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uKGFyZyl7IGV4dGVuZCh0YXJnZXQsIGFyZywgZGVlcCkgfSlcbiAgICByZXR1cm4gdGFyZ2V0XG4gIH1cblxuICAvLyBgJC56ZXB0by5xc2FgIGlzIFplcHRvJ3MgQ1NTIHNlbGVjdG9yIGltcGxlbWVudGF0aW9uIHdoaWNoXG4gIC8vIHVzZXMgYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGxgIGFuZCBvcHRpbWl6ZXMgZm9yIHNvbWUgc3BlY2lhbCBjYXNlcywgbGlrZSBgI2lkYC5cbiAgLy8gVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRlbiBpbiBwbHVnaW5zLlxuICB6ZXB0by5xc2EgPSBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3Rvcil7XG4gICAgdmFyIGZvdW5kLFxuICAgICAgICBtYXliZUlEID0gc2VsZWN0b3JbMF0gPT0gJyMnLFxuICAgICAgICBtYXliZUNsYXNzID0gIW1heWJlSUQgJiYgc2VsZWN0b3JbMF0gPT0gJy4nLFxuICAgICAgICBuYW1lT25seSA9IG1heWJlSUQgfHwgbWF5YmVDbGFzcyA/IHNlbGVjdG9yLnNsaWNlKDEpIDogc2VsZWN0b3IsIC8vIEVuc3VyZSB0aGF0IGEgMSBjaGFyIHRhZyBuYW1lIHN0aWxsIGdldHMgY2hlY2tlZFxuICAgICAgICBpc1NpbXBsZSA9IHNpbXBsZVNlbGVjdG9yUkUudGVzdChuYW1lT25seSlcbiAgICByZXR1cm4gKGlzRG9jdW1lbnQoZWxlbWVudCkgJiYgaXNTaW1wbGUgJiYgbWF5YmVJRCkgP1xuICAgICAgKCAoZm91bmQgPSBlbGVtZW50LmdldEVsZW1lbnRCeUlkKG5hbWVPbmx5KSkgPyBbZm91bmRdIDogW10gKSA6XG4gICAgICAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSAmJiBlbGVtZW50Lm5vZGVUeXBlICE9PSA5KSA/IFtdIDpcbiAgICAgIHNsaWNlLmNhbGwoXG4gICAgICAgIGlzU2ltcGxlICYmICFtYXliZUlEID9cbiAgICAgICAgICBtYXliZUNsYXNzID8gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG5hbWVPbmx5KSA6IC8vIElmIGl0J3Mgc2ltcGxlLCBpdCBjb3VsZCBiZSBhIGNsYXNzXG4gICAgICAgICAgZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3RvcikgOiAvLyBPciBhIHRhZ1xuICAgICAgICAgIGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikgLy8gT3IgaXQncyBub3Qgc2ltcGxlLCBhbmQgd2UgbmVlZCB0byBxdWVyeSBhbGxcbiAgICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbHRlcmVkKG5vZGVzLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gJChub2RlcykgOiAkKG5vZGVzKS5maWx0ZXIoc2VsZWN0b3IpXG4gIH1cblxuICAkLmNvbnRhaW5zID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zID9cbiAgICBmdW5jdGlvbihwYXJlbnQsIG5vZGUpIHtcbiAgICAgIHJldHVybiBwYXJlbnQgIT09IG5vZGUgJiYgcGFyZW50LmNvbnRhaW5zKG5vZGUpXG4gICAgfSA6XG4gICAgZnVuY3Rpb24ocGFyZW50LCBub2RlKSB7XG4gICAgICB3aGlsZSAobm9kZSAmJiAobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpXG4gICAgICAgIGlmIChub2RlID09PSBwYXJlbnQpIHJldHVybiB0cnVlXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgZnVuY3Rpb24gZnVuY0FyZyhjb250ZXh0LCBhcmcsIGlkeCwgcGF5bG9hZCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGFyZykgPyBhcmcuY2FsbChjb250ZXh0LCBpZHgsIHBheWxvYWQpIDogYXJnXG4gIH1cblxuICBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9PSBudWxsID8gbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSkgOiBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSlcbiAgfVxuXG4gIC8vIGFjY2VzcyBjbGFzc05hbWUgcHJvcGVydHkgd2hpbGUgcmVzcGVjdGluZyBTVkdBbmltYXRlZFN0cmluZ1xuICBmdW5jdGlvbiBjbGFzc05hbWUobm9kZSwgdmFsdWUpe1xuICAgIHZhciBrbGFzcyA9IG5vZGUuY2xhc3NOYW1lIHx8ICcnLFxuICAgICAgICBzdmcgICA9IGtsYXNzICYmIGtsYXNzLmJhc2VWYWwgIT09IHVuZGVmaW5lZFxuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBzdmcgPyBrbGFzcy5iYXNlVmFsIDoga2xhc3NcbiAgICBzdmcgPyAoa2xhc3MuYmFzZVZhbCA9IHZhbHVlKSA6IChub2RlLmNsYXNzTmFtZSA9IHZhbHVlKVxuICB9XG5cbiAgLy8gXCJ0cnVlXCIgID0+IHRydWVcbiAgLy8gXCJmYWxzZVwiID0+IGZhbHNlXG4gIC8vIFwibnVsbFwiICA9PiBudWxsXG4gIC8vIFwiNDJcIiAgICA9PiA0MlxuICAvLyBcIjQyLjVcIiAgPT4gNDIuNVxuICAvLyBcIjA4XCIgICAgPT4gXCIwOFwiXG4gIC8vIEpTT04gICAgPT4gcGFyc2UgaWYgdmFsaWRcbiAgLy8gU3RyaW5nICA9PiBzZWxmXG4gIGZ1bmN0aW9uIGRlc2VyaWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHZhbHVlID9cbiAgICAgICAgdmFsdWUgPT0gXCJ0cnVlXCIgfHxcbiAgICAgICAgKCB2YWx1ZSA9PSBcImZhbHNlXCIgPyBmYWxzZSA6XG4gICAgICAgICAgdmFsdWUgPT0gXCJudWxsXCIgPyBudWxsIDpcbiAgICAgICAgICArdmFsdWUgKyBcIlwiID09IHZhbHVlID8gK3ZhbHVlIDpcbiAgICAgICAgICAvXltcXFtcXHtdLy50ZXN0KHZhbHVlKSA/ICQucGFyc2VKU09OKHZhbHVlKSA6XG4gICAgICAgICAgdmFsdWUgKVxuICAgICAgICA6IHZhbHVlXG4gICAgfSBjYXRjaChlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG4gIH1cblxuICAkLnR5cGUgPSB0eXBlXG4gICQuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb25cbiAgJC5pc1dpbmRvdyA9IGlzV2luZG93XG4gICQuaXNBcnJheSA9IGlzQXJyYXlcbiAgJC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdFxuXG4gICQuaXNFbXB0eU9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lXG4gICAgZm9yIChuYW1lIGluIG9iaikgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gICQuaW5BcnJheSA9IGZ1bmN0aW9uKGVsZW0sIGFycmF5LCBpKXtcbiAgICByZXR1cm4gZW1wdHlBcnJheS5pbmRleE9mLmNhbGwoYXJyYXksIGVsZW0sIGkpXG4gIH1cblxuICAkLmNhbWVsQ2FzZSA9IGNhbWVsaXplXG4gICQudHJpbSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIgPT0gbnVsbCA/IFwiXCIgOiBTdHJpbmcucHJvdG90eXBlLnRyaW0uY2FsbChzdHIpXG4gIH1cblxuICAvLyBwbHVnaW4gY29tcGF0aWJpbGl0eVxuICAkLnV1aWQgPSAwXG4gICQuc3VwcG9ydCA9IHsgfVxuICAkLmV4cHIgPSB7IH1cblxuICAkLm1hcCA9IGZ1bmN0aW9uKGVsZW1lbnRzLCBjYWxsYmFjayl7XG4gICAgdmFyIHZhbHVlLCB2YWx1ZXMgPSBbXSwgaSwga2V5XG4gICAgaWYgKGxpa2VBcnJheShlbGVtZW50cykpXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBjYWxsYmFjayhlbGVtZW50c1tpXSwgaSlcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHZhbHVlcy5wdXNoKHZhbHVlKVxuICAgICAgfVxuICAgIGVsc2VcbiAgICAgIGZvciAoa2V5IGluIGVsZW1lbnRzKSB7XG4gICAgICAgIHZhbHVlID0gY2FsbGJhY2soZWxlbWVudHNba2V5XSwga2V5KVxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkgdmFsdWVzLnB1c2godmFsdWUpXG4gICAgICB9XG4gICAgcmV0dXJuIGZsYXR0ZW4odmFsdWVzKVxuICB9XG5cbiAgJC5lYWNoID0gZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrKXtcbiAgICB2YXIgaSwga2V5XG4gICAgaWYgKGxpa2VBcnJheShlbGVtZW50cykpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoZWxlbWVudHNbaV0sIGksIGVsZW1lbnRzW2ldKSA9PT0gZmFsc2UpIHJldHVybiBlbGVtZW50c1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGtleSBpbiBlbGVtZW50cylcbiAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoZWxlbWVudHNba2V5XSwga2V5LCBlbGVtZW50c1trZXldKSA9PT0gZmFsc2UpIHJldHVybiBlbGVtZW50c1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50c1xuICB9XG5cbiAgJC5ncmVwID0gZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrKXtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwoZWxlbWVudHMsIGNhbGxiYWNrKVxuICB9XG5cbiAgaWYgKHdpbmRvdy5KU09OKSAkLnBhcnNlSlNPTiA9IEpTT04ucGFyc2VcblxuICAvLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbiAgJC5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oaSwgbmFtZSkge1xuICAgIGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH0pXG5cbiAgLy8gRGVmaW5lIG1ldGhvZHMgdGhhdCB3aWxsIGJlIGF2YWlsYWJsZSBvbiBhbGxcbiAgLy8gWmVwdG8gY29sbGVjdGlvbnNcbiAgJC5mbiA9IHtcbiAgICAvLyBCZWNhdXNlIGEgY29sbGVjdGlvbiBhY3RzIGxpa2UgYW4gYXJyYXlcbiAgICAvLyBjb3B5IG92ZXIgdGhlc2UgdXNlZnVsIGFycmF5IGZ1bmN0aW9ucy5cbiAgICBmb3JFYWNoOiBlbXB0eUFycmF5LmZvckVhY2gsXG4gICAgcmVkdWNlOiBlbXB0eUFycmF5LnJlZHVjZSxcbiAgICBwdXNoOiBlbXB0eUFycmF5LnB1c2gsXG4gICAgc29ydDogZW1wdHlBcnJheS5zb3J0LFxuICAgIGluZGV4T2Y6IGVtcHR5QXJyYXkuaW5kZXhPZixcbiAgICBjb25jYXQ6IGVtcHR5QXJyYXkuY29uY2F0LFxuXG4gICAgLy8gYG1hcGAgYW5kIGBzbGljZWAgaW4gdGhlIGpRdWVyeSBBUEkgd29yayBkaWZmZXJlbnRseVxuICAgIC8vIGZyb20gdGhlaXIgYXJyYXkgY291bnRlcnBhcnRzXG4gICAgbWFwOiBmdW5jdGlvbihmbil7XG4gICAgICByZXR1cm4gJCgkLm1hcCh0aGlzLCBmdW5jdGlvbihlbCwgaSl7IHJldHVybiBmbi5jYWxsKGVsLCBpLCBlbCkgfSkpXG4gICAgfSxcbiAgICBzbGljZTogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiAkKHNsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpXG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbihjYWxsYmFjayl7XG4gICAgICAvLyBuZWVkIHRvIGNoZWNrIGlmIGRvY3VtZW50LmJvZHkgZXhpc3RzIGZvciBJRSBhcyB0aGF0IGJyb3dzZXIgcmVwb3J0c1xuICAgICAgLy8gZG9jdW1lbnQgcmVhZHkgd2hlbiBpdCBoYXNuJ3QgeWV0IGNyZWF0ZWQgdGhlIGJvZHkgZWxlbWVudFxuICAgICAgaWYgKHJlYWR5UkUudGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSAmJiBkb2N1bWVudC5ib2R5KSBjYWxsYmFjaygkKVxuICAgICAgZWxzZSBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKXsgY2FsbGJhY2soJCkgfSwgZmFsc2UpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbihpZHgpe1xuICAgICAgcmV0dXJuIGlkeCA9PT0gdW5kZWZpbmVkID8gc2xpY2UuY2FsbCh0aGlzKSA6IHRoaXNbaWR4ID49IDAgPyBpZHggOiBpZHggKyB0aGlzLmxlbmd0aF1cbiAgICB9LFxuICAgIHRvQXJyYXk6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmdldCgpIH0sXG4gICAgc2l6ZTogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aFxuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICBpZiAodGhpcy5wYXJlbnROb2RlICE9IG51bGwpXG4gICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpXG4gICAgICB9KVxuICAgIH0sXG4gICAgZWFjaDogZnVuY3Rpb24oY2FsbGJhY2spe1xuICAgICAgZW1wdHlBcnJheS5ldmVyeS5jYWxsKHRoaXMsIGZ1bmN0aW9uKGVsLCBpZHgpe1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChlbCwgaWR4LCBlbCkgIT09IGZhbHNlXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgaWYgKGlzRnVuY3Rpb24oc2VsZWN0b3IpKSByZXR1cm4gdGhpcy5ub3QodGhpcy5ub3Qoc2VsZWN0b3IpKVxuICAgICAgcmV0dXJuICQoZmlsdGVyLmNhbGwodGhpcywgZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgIHJldHVybiB6ZXB0by5tYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKVxuICAgICAgfSkpXG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uKHNlbGVjdG9yLGNvbnRleHQpe1xuICAgICAgcmV0dXJuICQodW5pcSh0aGlzLmNvbmNhdCgkKHNlbGVjdG9yLGNvbnRleHQpKSkpXG4gICAgfSxcbiAgICBpczogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gMCAmJiB6ZXB0by5tYXRjaGVzKHRoaXNbMF0sIHNlbGVjdG9yKVxuICAgIH0sXG4gICAgbm90OiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICB2YXIgbm9kZXM9W11cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5jYWxsICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpe1xuICAgICAgICAgIGlmICghc2VsZWN0b3IuY2FsbCh0aGlzLGlkeCkpIG5vZGVzLnB1c2godGhpcylcbiAgICAgICAgfSlcbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgZXhjbHVkZXMgPSB0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycgPyB0aGlzLmZpbHRlcihzZWxlY3RvcikgOlxuICAgICAgICAgIChsaWtlQXJyYXkoc2VsZWN0b3IpICYmIGlzRnVuY3Rpb24oc2VsZWN0b3IuaXRlbSkpID8gc2xpY2UuY2FsbChzZWxlY3RvcikgOiAkKHNlbGVjdG9yKVxuICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24oZWwpe1xuICAgICAgICAgIGlmIChleGNsdWRlcy5pbmRleE9mKGVsKSA8IDApIG5vZGVzLnB1c2goZWwpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICByZXR1cm4gJChub2RlcylcbiAgICB9LFxuICAgIGhhczogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBpc09iamVjdChzZWxlY3RvcikgP1xuICAgICAgICAgICQuY29udGFpbnModGhpcywgc2VsZWN0b3IpIDpcbiAgICAgICAgICAkKHRoaXMpLmZpbmQoc2VsZWN0b3IpLnNpemUoKVxuICAgICAgfSlcbiAgICB9LFxuICAgIGVxOiBmdW5jdGlvbihpZHgpe1xuICAgICAgcmV0dXJuIGlkeCA9PT0gLTEgPyB0aGlzLnNsaWNlKGlkeCkgOiB0aGlzLnNsaWNlKGlkeCwgKyBpZHggKyAxKVxuICAgIH0sXG4gICAgZmlyc3Q6IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgZWwgPSB0aGlzWzBdXG4gICAgICByZXR1cm4gZWwgJiYgIWlzT2JqZWN0KGVsKSA/IGVsIDogJChlbClcbiAgICB9LFxuICAgIGxhc3Q6IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgZWwgPSB0aGlzW3RoaXMubGVuZ3RoIC0gMV1cbiAgICAgIHJldHVybiBlbCAmJiAhaXNPYmplY3QoZWwpID8gZWwgOiAkKGVsKVxuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgdmFyIHJlc3VsdCwgJHRoaXMgPSB0aGlzXG4gICAgICBpZiAoIXNlbGVjdG9yKSByZXN1bHQgPSAkKClcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBzZWxlY3RvciA9PSAnb2JqZWN0JylcbiAgICAgICAgcmVzdWx0ID0gJChzZWxlY3RvcikuZmlsdGVyKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgdmFyIG5vZGUgPSB0aGlzXG4gICAgICAgICAgcmV0dXJuIGVtcHR5QXJyYXkuc29tZS5jYWxsKCR0aGlzLCBmdW5jdGlvbihwYXJlbnQpe1xuICAgICAgICAgICAgcmV0dXJuICQuY29udGFpbnMocGFyZW50LCBub2RlKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PSAxKSByZXN1bHQgPSAkKHplcHRvLnFzYSh0aGlzWzBdLCBzZWxlY3RvcikpXG4gICAgICBlbHNlIHJlc3VsdCA9IHRoaXMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiB6ZXB0by5xc2EodGhpcywgc2VsZWN0b3IpIH0pXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSxcbiAgICBjbG9zZXN0OiBmdW5jdGlvbihzZWxlY3RvciwgY29udGV4dCl7XG4gICAgICB2YXIgbm9kZSA9IHRoaXNbMF0sIGNvbGxlY3Rpb24gPSBmYWxzZVxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PSAnb2JqZWN0JykgY29sbGVjdGlvbiA9ICQoc2VsZWN0b3IpXG4gICAgICB3aGlsZSAobm9kZSAmJiAhKGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmluZGV4T2Yobm9kZSkgPj0gMCA6IHplcHRvLm1hdGNoZXMobm9kZSwgc2VsZWN0b3IpKSlcbiAgICAgICAgbm9kZSA9IG5vZGUgIT09IGNvbnRleHQgJiYgIWlzRG9jdW1lbnQobm9kZSkgJiYgbm9kZS5wYXJlbnROb2RlXG4gICAgICByZXR1cm4gJChub2RlKVxuICAgIH0sXG4gICAgcGFyZW50czogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgdmFyIGFuY2VzdG9ycyA9IFtdLCBub2RlcyA9IHRoaXNcbiAgICAgIHdoaWxlIChub2Rlcy5sZW5ndGggPiAwKVxuICAgICAgICBub2RlcyA9ICQubWFwKG5vZGVzLCBmdW5jdGlvbihub2RlKXtcbiAgICAgICAgICBpZiAoKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpICYmICFpc0RvY3VtZW50KG5vZGUpICYmIGFuY2VzdG9ycy5pbmRleE9mKG5vZGUpIDwgMCkge1xuICAgICAgICAgICAgYW5jZXN0b3JzLnB1c2gobm9kZSlcbiAgICAgICAgICAgIHJldHVybiBub2RlXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgcmV0dXJuIGZpbHRlcmVkKGFuY2VzdG9ycywgc2VsZWN0b3IpXG4gICAgfSxcbiAgICBwYXJlbnQ6IGZ1bmN0aW9uKHNlbGVjdG9yKXtcbiAgICAgIHJldHVybiBmaWx0ZXJlZCh1bmlxKHRoaXMucGx1Y2soJ3BhcmVudE5vZGUnKSksIHNlbGVjdG9yKVxuICAgIH0sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uKHNlbGVjdG9yKXtcbiAgICAgIHJldHVybiBmaWx0ZXJlZCh0aGlzLm1hcChmdW5jdGlvbigpeyByZXR1cm4gY2hpbGRyZW4odGhpcykgfSksIHNlbGVjdG9yKVxuICAgIH0sXG4gICAgY29udGVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkgeyByZXR1cm4gc2xpY2UuY2FsbCh0aGlzLmNoaWxkTm9kZXMpIH0pXG4gICAgfSxcbiAgICBzaWJsaW5nczogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgcmV0dXJuIGZpbHRlcmVkKHRoaXMubWFwKGZ1bmN0aW9uKGksIGVsKXtcbiAgICAgICAgcmV0dXJuIGZpbHRlci5jYWxsKGNoaWxkcmVuKGVsLnBhcmVudE5vZGUpLCBmdW5jdGlvbihjaGlsZCl7IHJldHVybiBjaGlsZCE9PWVsIH0pXG4gICAgICB9KSwgc2VsZWN0b3IpXG4gICAgfSxcbiAgICBlbXB0eTogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsgdGhpcy5pbm5lckhUTUwgPSAnJyB9KVxuICAgIH0sXG4gICAgLy8gYHBsdWNrYCBpcyBib3Jyb3dlZCBmcm9tIFByb3RvdHlwZS5qc1xuICAgIHBsdWNrOiBmdW5jdGlvbihwcm9wZXJ0eSl7XG4gICAgICByZXR1cm4gJC5tYXAodGhpcywgZnVuY3Rpb24oZWwpeyByZXR1cm4gZWxbcHJvcGVydHldIH0pXG4gICAgfSxcbiAgICBzaG93OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPT0gXCJub25lXCIgJiYgKHRoaXMuc3R5bGUuZGlzcGxheSA9ICcnKVxuICAgICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCAnJykuZ2V0UHJvcGVydHlWYWx1ZShcImRpc3BsYXlcIikgPT0gXCJub25lXCIpXG4gICAgICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gZGVmYXVsdERpc3BsYXkodGhpcy5ub2RlTmFtZSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICByZXBsYWNlV2l0aDogZnVuY3Rpb24obmV3Q29udGVudCl7XG4gICAgICByZXR1cm4gdGhpcy5iZWZvcmUobmV3Q29udGVudCkucmVtb3ZlKClcbiAgICB9LFxuICAgIHdyYXA6IGZ1bmN0aW9uKHN0cnVjdHVyZSl7XG4gICAgICB2YXIgZnVuYyA9IGlzRnVuY3Rpb24oc3RydWN0dXJlKVxuICAgICAgaWYgKHRoaXNbMF0gJiYgIWZ1bmMpXG4gICAgICAgIHZhciBkb20gICA9ICQoc3RydWN0dXJlKS5nZXQoMCksXG4gICAgICAgICAgICBjbG9uZSA9IGRvbS5wYXJlbnROb2RlIHx8IHRoaXMubGVuZ3RoID4gMVxuXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgJCh0aGlzKS53cmFwQWxsKFxuICAgICAgICAgIGZ1bmMgPyBzdHJ1Y3R1cmUuY2FsbCh0aGlzLCBpbmRleCkgOlxuICAgICAgICAgICAgY2xvbmUgPyBkb20uY2xvbmVOb2RlKHRydWUpIDogZG9tXG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfSxcbiAgICB3cmFwQWxsOiBmdW5jdGlvbihzdHJ1Y3R1cmUpe1xuICAgICAgaWYgKHRoaXNbMF0pIHtcbiAgICAgICAgJCh0aGlzWzBdKS5iZWZvcmUoc3RydWN0dXJlID0gJChzdHJ1Y3R1cmUpKVxuICAgICAgICB2YXIgY2hpbGRyZW5cbiAgICAgICAgLy8gZHJpbGwgZG93biB0byB0aGUgaW5tb3N0IGVsZW1lbnRcbiAgICAgICAgd2hpbGUgKChjaGlsZHJlbiA9IHN0cnVjdHVyZS5jaGlsZHJlbigpKS5sZW5ndGgpIHN0cnVjdHVyZSA9IGNoaWxkcmVuLmZpcnN0KClcbiAgICAgICAgJChzdHJ1Y3R1cmUpLmFwcGVuZCh0aGlzKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIHdyYXBJbm5lcjogZnVuY3Rpb24oc3RydWN0dXJlKXtcbiAgICAgIHZhciBmdW5jID0gaXNGdW5jdGlvbihzdHJ1Y3R1cmUpXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgdmFyIHNlbGYgPSAkKHRoaXMpLCBjb250ZW50cyA9IHNlbGYuY29udGVudHMoKSxcbiAgICAgICAgICAgIGRvbSAgPSBmdW5jID8gc3RydWN0dXJlLmNhbGwodGhpcywgaW5kZXgpIDogc3RydWN0dXJlXG4gICAgICAgIGNvbnRlbnRzLmxlbmd0aCA/IGNvbnRlbnRzLndyYXBBbGwoZG9tKSA6IHNlbGYuYXBwZW5kKGRvbSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICB1bndyYXA6IGZ1bmN0aW9uKCl7XG4gICAgICB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgJCh0aGlzKS5yZXBsYWNlV2l0aCgkKHRoaXMpLmNoaWxkcmVuKCkpXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIGNsb25lOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmNsb25lTm9kZSh0cnVlKSB9KVxuICAgIH0sXG4gICAgaGlkZTogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiB0aGlzLmNzcyhcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgfSxcbiAgICB0b2dnbGU6IGZ1bmN0aW9uKHNldHRpbmcpe1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZWwgPSAkKHRoaXMpXG4gICAgICAgIDsoc2V0dGluZyA9PT0gdW5kZWZpbmVkID8gZWwuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIiA6IHNldHRpbmcpID8gZWwuc2hvdygpIDogZWwuaGlkZSgpXG4gICAgICB9KVxuICAgIH0sXG4gICAgcHJldjogZnVuY3Rpb24oc2VsZWN0b3IpeyByZXR1cm4gJCh0aGlzLnBsdWNrKCdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJykpLmZpbHRlcihzZWxlY3RvciB8fCAnKicpIH0sXG4gICAgbmV4dDogZnVuY3Rpb24oc2VsZWN0b3IpeyByZXR1cm4gJCh0aGlzLnBsdWNrKCduZXh0RWxlbWVudFNpYmxpbmcnKSkuZmlsdGVyKHNlbGVjdG9yIHx8ICcqJykgfSxcbiAgICBodG1sOiBmdW5jdGlvbihodG1sKXtcbiAgICAgIHJldHVybiAwIGluIGFyZ3VtZW50cyA/XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpe1xuICAgICAgICAgIHZhciBvcmlnaW5IdG1sID0gdGhpcy5pbm5lckhUTUxcbiAgICAgICAgICAkKHRoaXMpLmVtcHR5KCkuYXBwZW5kKCBmdW5jQXJnKHRoaXMsIGh0bWwsIGlkeCwgb3JpZ2luSHRtbCkgKVxuICAgICAgICB9KSA6XG4gICAgICAgICgwIGluIHRoaXMgPyB0aGlzWzBdLmlubmVySFRNTCA6IG51bGwpXG4gICAgfSxcbiAgICB0ZXh0OiBmdW5jdGlvbih0ZXh0KXtcbiAgICAgIHJldHVybiAwIGluIGFyZ3VtZW50cyA/XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpe1xuICAgICAgICAgIHZhciBuZXdUZXh0ID0gZnVuY0FyZyh0aGlzLCB0ZXh0LCBpZHgsIHRoaXMudGV4dENvbnRlbnQpXG4gICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IG5ld1RleHQgPT0gbnVsbCA/ICcnIDogJycrbmV3VGV4dFxuICAgICAgICB9KSA6XG4gICAgICAgICgwIGluIHRoaXMgPyB0aGlzWzBdLnRleHRDb250ZW50IDogbnVsbClcbiAgICB9LFxuICAgIGF0dHI6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXtcbiAgICAgIHZhciByZXN1bHRcbiAgICAgIHJldHVybiAodHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgJiYgISgxIGluIGFyZ3VtZW50cykpID9cbiAgICAgICAgKCF0aGlzLmxlbmd0aCB8fCB0aGlzWzBdLm5vZGVUeXBlICE9PSAxID8gdW5kZWZpbmVkIDpcbiAgICAgICAgICAoIShyZXN1bHQgPSB0aGlzWzBdLmdldEF0dHJpYnV0ZShuYW1lKSkgJiYgbmFtZSBpbiB0aGlzWzBdKSA/IHRoaXNbMF1bbmFtZV0gOiByZXN1bHRcbiAgICAgICAgKSA6XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpe1xuICAgICAgICAgIGlmICh0aGlzLm5vZGVUeXBlICE9PSAxKSByZXR1cm5cbiAgICAgICAgICBpZiAoaXNPYmplY3QobmFtZSkpIGZvciAoa2V5IGluIG5hbWUpIHNldEF0dHJpYnV0ZSh0aGlzLCBrZXksIG5hbWVba2V5XSlcbiAgICAgICAgICBlbHNlIHNldEF0dHJpYnV0ZSh0aGlzLCBuYW1lLCBmdW5jQXJnKHRoaXMsIHZhbHVlLCBpZHgsIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpKSlcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyB0aGlzLm5vZGVUeXBlID09PSAxICYmIG5hbWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKGF0dHJpYnV0ZSl7XG4gICAgICAgIHNldEF0dHJpYnV0ZSh0aGlzLCBhdHRyaWJ1dGUpXG4gICAgICB9LCB0aGlzKX0pXG4gICAgfSxcbiAgICBwcm9wOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSl7XG4gICAgICBuYW1lID0gcHJvcE1hcFtuYW1lXSB8fCBuYW1lXG4gICAgICByZXR1cm4gKDEgaW4gYXJndW1lbnRzKSA/XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpe1xuICAgICAgICAgIHRoaXNbbmFtZV0gPSBmdW5jQXJnKHRoaXMsIHZhbHVlLCBpZHgsIHRoaXNbbmFtZV0pXG4gICAgICAgIH0pIDpcbiAgICAgICAgKHRoaXNbMF0gJiYgdGhpc1swXVtuYW1lXSlcbiAgICB9LFxuICAgIGRhdGE6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXtcbiAgICAgIHZhciBhdHRyTmFtZSA9ICdkYXRhLScgKyBuYW1lLnJlcGxhY2UoY2FwaXRhbFJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxuXG4gICAgICB2YXIgZGF0YSA9ICgxIGluIGFyZ3VtZW50cykgP1xuICAgICAgICB0aGlzLmF0dHIoYXR0ck5hbWUsIHZhbHVlKSA6XG4gICAgICAgIHRoaXMuYXR0cihhdHRyTmFtZSlcblxuICAgICAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkZXNlcmlhbGl6ZVZhbHVlKGRhdGEpIDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICB2YWw6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIHJldHVybiAwIGluIGFyZ3VtZW50cyA/XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpe1xuICAgICAgICAgIHRoaXMudmFsdWUgPSBmdW5jQXJnKHRoaXMsIHZhbHVlLCBpZHgsIHRoaXMudmFsdWUpXG4gICAgICAgIH0pIDpcbiAgICAgICAgKHRoaXNbMF0gJiYgKHRoaXNbMF0ubXVsdGlwbGUgP1xuICAgICAgICAgICAkKHRoaXNbMF0pLmZpbmQoJ29wdGlvbicpLmZpbHRlcihmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5zZWxlY3RlZCB9KS5wbHVjaygndmFsdWUnKSA6XG4gICAgICAgICAgIHRoaXNbMF0udmFsdWUpXG4gICAgICAgIClcbiAgICB9LFxuICAgIG9mZnNldDogZnVuY3Rpb24oY29vcmRpbmF0ZXMpe1xuICAgICAgaWYgKGNvb3JkaW5hdGVzKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGNvb3JkcyA9IGZ1bmNBcmcodGhpcywgY29vcmRpbmF0ZXMsIGluZGV4LCAkdGhpcy5vZmZzZXQoKSksXG4gICAgICAgICAgICBwYXJlbnRPZmZzZXQgPSAkdGhpcy5vZmZzZXRQYXJlbnQoKS5vZmZzZXQoKSxcbiAgICAgICAgICAgIHByb3BzID0ge1xuICAgICAgICAgICAgICB0b3A6ICBjb29yZHMudG9wICAtIHBhcmVudE9mZnNldC50b3AsXG4gICAgICAgICAgICAgIGxlZnQ6IGNvb3Jkcy5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnRcbiAgICAgICAgICAgIH1cblxuICAgICAgICBpZiAoJHRoaXMuY3NzKCdwb3NpdGlvbicpID09ICdzdGF0aWMnKSBwcm9wc1sncG9zaXRpb24nXSA9ICdyZWxhdGl2ZSdcbiAgICAgICAgJHRoaXMuY3NzKHByb3BzKVxuICAgICAgfSlcbiAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVybiBudWxsXG4gICAgICB2YXIgb2JqID0gdGhpc1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogb2JqLmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICAgIHRvcDogb2JqLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgICAgd2lkdGg6IE1hdGgucm91bmQob2JqLndpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKG9iai5oZWlnaHQpXG4gICAgICB9XG4gICAgfSxcbiAgICBjc3M6IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSl7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUsIGVsZW1lbnQgPSB0aGlzWzBdXG4gICAgICAgIGlmKCFlbGVtZW50KSByZXR1cm5cbiAgICAgICAgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgJycpXG4gICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT0gJ3N0cmluZycpXG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbY2FtZWxpemUocHJvcGVydHkpXSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpXG4gICAgICAgIGVsc2UgaWYgKGlzQXJyYXkocHJvcGVydHkpKSB7XG4gICAgICAgICAgdmFyIHByb3BzID0ge31cbiAgICAgICAgICAkLmVhY2gocHJvcGVydHksIGZ1bmN0aW9uKF8sIHByb3Ape1xuICAgICAgICAgICAgcHJvcHNbcHJvcF0gPSAoZWxlbWVudC5zdHlsZVtjYW1lbGl6ZShwcm9wKV0gfHwgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgcmV0dXJuIHByb3BzXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNzcyA9ICcnXG4gICAgICBpZiAodHlwZShwcm9wZXJ0eSkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMClcbiAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXsgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShkYXNoZXJpemUocHJvcGVydHkpKSB9KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgY3NzID0gZGFzaGVyaXplKHByb3BlcnR5KSArIFwiOlwiICsgbWF5YmVBZGRQeChwcm9wZXJ0eSwgdmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGtleSBpbiBwcm9wZXJ0eSlcbiAgICAgICAgICBpZiAoIXByb3BlcnR5W2tleV0gJiYgcHJvcGVydHlba2V5XSAhPT0gMClcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpeyB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KGRhc2hlcml6ZShrZXkpKSB9KVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNzcyArPSBkYXNoZXJpemUoa2V5KSArICc6JyArIG1heWJlQWRkUHgoa2V5LCBwcm9wZXJ0eVtrZXldKSArICc7J1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHRoaXMuc3R5bGUuY3NzVGV4dCArPSAnOycgKyBjc3MgfSlcbiAgICB9LFxuICAgIGluZGV4OiBmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgIHJldHVybiBlbGVtZW50ID8gdGhpcy5pbmRleE9mKCQoZWxlbWVudClbMF0pIDogdGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpLmluZGV4T2YodGhpc1swXSlcbiAgICB9LFxuICAgIGhhc0NsYXNzOiBmdW5jdGlvbihuYW1lKXtcbiAgICAgIGlmICghbmFtZSkgcmV0dXJuIGZhbHNlXG4gICAgICByZXR1cm4gZW1wdHlBcnJheS5zb21lLmNhbGwodGhpcywgZnVuY3Rpb24oZWwpe1xuICAgICAgICByZXR1cm4gdGhpcy50ZXN0KGNsYXNzTmFtZShlbCkpXG4gICAgICB9LCBjbGFzc1JFKG5hbWUpKVxuICAgIH0sXG4gICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgaWYgKCFuYW1lKSByZXR1cm4gdGhpc1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpe1xuICAgICAgICBpZiAoISgnY2xhc3NOYW1lJyBpbiB0aGlzKSkgcmV0dXJuXG4gICAgICAgIGNsYXNzTGlzdCA9IFtdXG4gICAgICAgIHZhciBjbHMgPSBjbGFzc05hbWUodGhpcyksIG5ld05hbWUgPSBmdW5jQXJnKHRoaXMsIG5hbWUsIGlkeCwgY2xzKVxuICAgICAgICBuZXdOYW1lLnNwbGl0KC9cXHMrL2cpLmZvckVhY2goZnVuY3Rpb24oa2xhc3Mpe1xuICAgICAgICAgIGlmICghJCh0aGlzKS5oYXNDbGFzcyhrbGFzcykpIGNsYXNzTGlzdC5wdXNoKGtsYXNzKVxuICAgICAgICB9LCB0aGlzKVxuICAgICAgICBjbGFzc0xpc3QubGVuZ3RoICYmIGNsYXNzTmFtZSh0aGlzLCBjbHMgKyAoY2xzID8gXCIgXCIgOiBcIlwiKSArIGNsYXNzTGlzdC5qb2luKFwiIFwiKSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICByZW1vdmVDbGFzczogZnVuY3Rpb24obmFtZSl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgIGlmICghKCdjbGFzc05hbWUnIGluIHRoaXMpKSByZXR1cm5cbiAgICAgICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNsYXNzTmFtZSh0aGlzLCAnJylcbiAgICAgICAgY2xhc3NMaXN0ID0gY2xhc3NOYW1lKHRoaXMpXG4gICAgICAgIGZ1bmNBcmcodGhpcywgbmFtZSwgaWR4LCBjbGFzc0xpc3QpLnNwbGl0KC9cXHMrL2cpLmZvckVhY2goZnVuY3Rpb24oa2xhc3Mpe1xuICAgICAgICAgIGNsYXNzTGlzdCA9IGNsYXNzTGlzdC5yZXBsYWNlKGNsYXNzUkUoa2xhc3MpLCBcIiBcIilcbiAgICAgICAgfSlcbiAgICAgICAgY2xhc3NOYW1lKHRoaXMsIGNsYXNzTGlzdC50cmltKCkpXG4gICAgICB9KVxuICAgIH0sXG4gICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKG5hbWUsIHdoZW4pe1xuICAgICAgaWYgKCFuYW1lKSByZXR1cm4gdGhpc1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpe1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLCBuYW1lcyA9IGZ1bmNBcmcodGhpcywgbmFtZSwgaWR4LCBjbGFzc05hbWUodGhpcykpXG4gICAgICAgIG5hbWVzLnNwbGl0KC9cXHMrL2cpLmZvckVhY2goZnVuY3Rpb24oa2xhc3Mpe1xuICAgICAgICAgICh3aGVuID09PSB1bmRlZmluZWQgPyAhJHRoaXMuaGFzQ2xhc3Moa2xhc3MpIDogd2hlbikgP1xuICAgICAgICAgICAgJHRoaXMuYWRkQ2xhc3Moa2xhc3MpIDogJHRoaXMucmVtb3ZlQ2xhc3Moa2xhc3MpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sXG4gICAgc2Nyb2xsVG9wOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBpZiAoIXRoaXMubGVuZ3RoKSByZXR1cm5cbiAgICAgIHZhciBoYXNTY3JvbGxUb3AgPSAnc2Nyb2xsVG9wJyBpbiB0aGlzWzBdXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGhhc1Njcm9sbFRvcCA/IHRoaXNbMF0uc2Nyb2xsVG9wIDogdGhpc1swXS5wYWdlWU9mZnNldFxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChoYXNTY3JvbGxUb3AgP1xuICAgICAgICBmdW5jdGlvbigpeyB0aGlzLnNjcm9sbFRvcCA9IHZhbHVlIH0gOlxuICAgICAgICBmdW5jdGlvbigpeyB0aGlzLnNjcm9sbFRvKHRoaXMuc2Nyb2xsWCwgdmFsdWUpIH0pXG4gICAgfSxcbiAgICBzY3JvbGxMZWZ0OiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBpZiAoIXRoaXMubGVuZ3RoKSByZXR1cm5cbiAgICAgIHZhciBoYXNTY3JvbGxMZWZ0ID0gJ3Njcm9sbExlZnQnIGluIHRoaXNbMF1cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaGFzU2Nyb2xsTGVmdCA/IHRoaXNbMF0uc2Nyb2xsTGVmdCA6IHRoaXNbMF0ucGFnZVhPZmZzZXRcbiAgICAgIHJldHVybiB0aGlzLmVhY2goaGFzU2Nyb2xsTGVmdCA/XG4gICAgICAgIGZ1bmN0aW9uKCl7IHRoaXMuc2Nyb2xsTGVmdCA9IHZhbHVlIH0gOlxuICAgICAgICBmdW5jdGlvbigpeyB0aGlzLnNjcm9sbFRvKHZhbHVlLCB0aGlzLnNjcm9sbFkpIH0pXG4gICAgfSxcbiAgICBwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMubGVuZ3RoKSByZXR1cm5cblxuICAgICAgdmFyIGVsZW0gPSB0aGlzWzBdLFxuICAgICAgICAvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuICAgICAgICBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpLFxuICAgICAgICAvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG4gICAgICAgIG9mZnNldCAgICAgICA9IHRoaXMub2Zmc2V0KCksXG4gICAgICAgIHBhcmVudE9mZnNldCA9IHJvb3ROb2RlUkUudGVzdChvZmZzZXRQYXJlbnRbMF0ubm9kZU5hbWUpID8geyB0b3A6IDAsIGxlZnQ6IDAgfSA6IG9mZnNldFBhcmVudC5vZmZzZXQoKVxuXG4gICAgICAvLyBTdWJ0cmFjdCBlbGVtZW50IG1hcmdpbnNcbiAgICAgIC8vIG5vdGU6IHdoZW4gYW4gZWxlbWVudCBoYXMgbWFyZ2luOiBhdXRvIHRoZSBvZmZzZXRMZWZ0IGFuZCBtYXJnaW5MZWZ0XG4gICAgICAvLyBhcmUgdGhlIHNhbWUgaW4gU2FmYXJpIGNhdXNpbmcgb2Zmc2V0LmxlZnQgdG8gaW5jb3JyZWN0bHkgYmUgMFxuICAgICAgb2Zmc2V0LnRvcCAgLT0gcGFyc2VGbG9hdCggJChlbGVtKS5jc3MoJ21hcmdpbi10b3AnKSApIHx8IDBcbiAgICAgIG9mZnNldC5sZWZ0IC09IHBhcnNlRmxvYXQoICQoZWxlbSkuY3NzKCdtYXJnaW4tbGVmdCcpICkgfHwgMFxuXG4gICAgICAvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcbiAgICAgIHBhcmVudE9mZnNldC50b3AgICs9IHBhcnNlRmxvYXQoICQob2Zmc2V0UGFyZW50WzBdKS5jc3MoJ2JvcmRlci10b3Atd2lkdGgnKSApIHx8IDBcbiAgICAgIHBhcmVudE9mZnNldC5sZWZ0ICs9IHBhcnNlRmxvYXQoICQob2Zmc2V0UGFyZW50WzBdKS5jc3MoJ2JvcmRlci1sZWZ0LXdpZHRoJykgKSB8fCAwXG5cbiAgICAgIC8vIFN1YnRyYWN0IHRoZSB0d28gb2Zmc2V0c1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAgb2Zmc2V0LnRvcCAgLSBwYXJlbnRPZmZzZXQudG9wLFxuICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0XG4gICAgICB9XG4gICAgfSxcbiAgICBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2N1bWVudC5ib2R5XG4gICAgICAgIHdoaWxlIChwYXJlbnQgJiYgIXJvb3ROb2RlUkUudGVzdChwYXJlbnQubm9kZU5hbWUpICYmICQocGFyZW50KS5jc3MoXCJwb3NpdGlvblwiKSA9PSBcInN0YXRpY1wiKVxuICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5vZmZzZXRQYXJlbnRcbiAgICAgICAgcmV0dXJuIHBhcmVudFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvLyBmb3Igbm93XG4gICQuZm4uZGV0YWNoID0gJC5mbi5yZW1vdmVcblxuICAvLyBHZW5lcmF0ZSB0aGUgYHdpZHRoYCBhbmQgYGhlaWdodGAgZnVuY3Rpb25zXG4gIDtbJ3dpZHRoJywgJ2hlaWdodCddLmZvckVhY2goZnVuY3Rpb24oZGltZW5zaW9uKXtcbiAgICB2YXIgZGltZW5zaW9uUHJvcGVydHkgPVxuICAgICAgZGltZW5zaW9uLnJlcGxhY2UoLy4vLCBmdW5jdGlvbihtKXsgcmV0dXJuIG1bMF0udG9VcHBlckNhc2UoKSB9KVxuXG4gICAgJC5mbltkaW1lbnNpb25dID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgdmFyIG9mZnNldCwgZWwgPSB0aGlzWzBdXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGlzV2luZG93KGVsKSA/IGVsWydpbm5lcicgKyBkaW1lbnNpb25Qcm9wZXJ0eV0gOlxuICAgICAgICBpc0RvY3VtZW50KGVsKSA/IGVsLmRvY3VtZW50RWxlbWVudFsnc2Nyb2xsJyArIGRpbWVuc2lvblByb3BlcnR5XSA6XG4gICAgICAgIChvZmZzZXQgPSB0aGlzLm9mZnNldCgpKSAmJiBvZmZzZXRbZGltZW5zaW9uXVxuICAgICAgZWxzZSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgIGVsID0gJCh0aGlzKVxuICAgICAgICBlbC5jc3MoZGltZW5zaW9uLCBmdW5jQXJnKHRoaXMsIHZhbHVlLCBpZHgsIGVsW2RpbWVuc2lvbl0oKSkpXG4gICAgICB9KVxuICAgIH1cbiAgfSlcblxuICBmdW5jdGlvbiB0cmF2ZXJzZU5vZGUobm9kZSwgZnVuKSB7XG4gICAgZnVuKG5vZGUpXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKylcbiAgICAgIHRyYXZlcnNlTm9kZShub2RlLmNoaWxkTm9kZXNbaV0sIGZ1bilcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIHRoZSBgYWZ0ZXJgLCBgcHJlcGVuZGAsIGBiZWZvcmVgLCBgYXBwZW5kYCxcbiAgLy8gYGluc2VydEFmdGVyYCwgYGluc2VydEJlZm9yZWAsIGBhcHBlbmRUb2AsIGFuZCBgcHJlcGVuZFRvYCBtZXRob2RzLlxuICBhZGphY2VuY3lPcGVyYXRvcnMuZm9yRWFjaChmdW5jdGlvbihvcGVyYXRvciwgb3BlcmF0b3JJbmRleCkge1xuICAgIHZhciBpbnNpZGUgPSBvcGVyYXRvckluZGV4ICUgMiAvLz0+IHByZXBlbmQsIGFwcGVuZFxuXG4gICAgJC5mbltvcGVyYXRvcl0gPSBmdW5jdGlvbigpe1xuICAgICAgLy8gYXJndW1lbnRzIGNhbiBiZSBub2RlcywgYXJyYXlzIG9mIG5vZGVzLCBaZXB0byBvYmplY3RzIGFuZCBIVE1MIHN0cmluZ3NcbiAgICAgIHZhciBhcmdUeXBlLCBub2RlcyA9ICQubWFwKGFyZ3VtZW50cywgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgICAgICBhcmdUeXBlID0gdHlwZShhcmcpXG4gICAgICAgICAgICByZXR1cm4gYXJnVHlwZSA9PSBcIm9iamVjdFwiIHx8IGFyZ1R5cGUgPT0gXCJhcnJheVwiIHx8IGFyZyA9PSBudWxsID9cbiAgICAgICAgICAgICAgYXJnIDogemVwdG8uZnJhZ21lbnQoYXJnKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHBhcmVudCwgY29weUJ5Q2xvbmUgPSB0aGlzLmxlbmd0aCA+IDFcbiAgICAgIGlmIChub2Rlcy5sZW5ndGggPCAxKSByZXR1cm4gdGhpc1xuXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKF8sIHRhcmdldCl7XG4gICAgICAgIHBhcmVudCA9IGluc2lkZSA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlXG5cbiAgICAgICAgLy8gY29udmVydCBhbGwgbWV0aG9kcyB0byBhIFwiYmVmb3JlXCIgb3BlcmF0aW9uXG4gICAgICAgIHRhcmdldCA9IG9wZXJhdG9ySW5kZXggPT0gMCA/IHRhcmdldC5uZXh0U2libGluZyA6XG4gICAgICAgICAgICAgICAgIG9wZXJhdG9ySW5kZXggPT0gMSA/IHRhcmdldC5maXJzdENoaWxkIDpcbiAgICAgICAgICAgICAgICAgb3BlcmF0b3JJbmRleCA9PSAyID8gdGFyZ2V0IDpcbiAgICAgICAgICAgICAgICAgbnVsbFxuXG4gICAgICAgIHZhciBwYXJlbnRJbkRvY3VtZW50ID0gJC5jb250YWlucyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHBhcmVudClcblxuICAgICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICAgIGlmIChjb3B5QnlDbG9uZSkgbm9kZSA9IG5vZGUuY2xvbmVOb2RlKHRydWUpXG4gICAgICAgICAgZWxzZSBpZiAoIXBhcmVudCkgcmV0dXJuICQobm9kZSkucmVtb3ZlKClcblxuICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgdGFyZ2V0KVxuICAgICAgICAgIGlmIChwYXJlbnRJbkRvY3VtZW50KSB0cmF2ZXJzZU5vZGUobm9kZSwgZnVuY3Rpb24oZWwpe1xuICAgICAgICAgICAgaWYgKGVsLm5vZGVOYW1lICE9IG51bGwgJiYgZWwubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1NDUklQVCcgJiZcbiAgICAgICAgICAgICAgICghZWwudHlwZSB8fCBlbC50eXBlID09PSAndGV4dC9qYXZhc2NyaXB0JykgJiYgIWVsLnNyYylcbiAgICAgICAgICAgICAgd2luZG93WydldmFsJ10uY2FsbCh3aW5kb3csIGVsLmlubmVySFRNTClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBhZnRlciAgICA9PiBpbnNlcnRBZnRlclxuICAgIC8vIHByZXBlbmQgID0+IHByZXBlbmRUb1xuICAgIC8vIGJlZm9yZSAgID0+IGluc2VydEJlZm9yZVxuICAgIC8vIGFwcGVuZCAgID0+IGFwcGVuZFRvXG4gICAgJC5mbltpbnNpZGUgPyBvcGVyYXRvcisnVG8nIDogJ2luc2VydCcrKG9wZXJhdG9ySW5kZXggPyAnQmVmb3JlJyA6ICdBZnRlcicpXSA9IGZ1bmN0aW9uKGh0bWwpe1xuICAgICAgJChodG1sKVtvcGVyYXRvcl0odGhpcylcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICB9KVxuXG4gIHplcHRvLloucHJvdG90eXBlID0gJC5mblxuXG4gIC8vIEV4cG9ydCBpbnRlcm5hbCBBUEkgZnVuY3Rpb25zIGluIHRoZSBgJC56ZXB0b2AgbmFtZXNwYWNlXG4gIHplcHRvLnVuaXEgPSB1bmlxXG4gIHplcHRvLmRlc2VyaWFsaXplVmFsdWUgPSBkZXNlcmlhbGl6ZVZhbHVlXG4gICQuemVwdG8gPSB6ZXB0b1xuXG4gIHJldHVybiAkXG59KSgpXG5cbndpbmRvdy5aZXB0byA9IFplcHRvXG53aW5kb3cuJCA9PT0gdW5kZWZpbmVkICYmICh3aW5kb3cuJCA9IFplcHRvKVxuXG47KGZ1bmN0aW9uKCQpe1xuICB2YXIgX3ppZCA9IDEsIHVuZGVmaW5lZCxcbiAgICAgIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLFxuICAgICAgaXNGdW5jdGlvbiA9ICQuaXNGdW5jdGlvbixcbiAgICAgIGlzU3RyaW5nID0gZnVuY3Rpb24ob2JqKXsgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ3N0cmluZycgfSxcbiAgICAgIGhhbmRsZXJzID0ge30sXG4gICAgICBzcGVjaWFsRXZlbnRzPXt9LFxuICAgICAgZm9jdXNpblN1cHBvcnRlZCA9ICdvbmZvY3VzaW4nIGluIHdpbmRvdyxcbiAgICAgIGZvY3VzID0geyBmb2N1czogJ2ZvY3VzaW4nLCBibHVyOiAnZm9jdXNvdXQnIH0sXG4gICAgICBob3ZlciA9IHsgbW91c2VlbnRlcjogJ21vdXNlb3ZlcicsIG1vdXNlbGVhdmU6ICdtb3VzZW91dCcgfVxuXG4gIHNwZWNpYWxFdmVudHMuY2xpY2sgPSBzcGVjaWFsRXZlbnRzLm1vdXNlZG93biA9IHNwZWNpYWxFdmVudHMubW91c2V1cCA9IHNwZWNpYWxFdmVudHMubW91c2Vtb3ZlID0gJ01vdXNlRXZlbnRzJ1xuXG4gIGZ1bmN0aW9uIHppZChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuX3ppZCB8fCAoZWxlbWVudC5femlkID0gX3ppZCsrKVxuICB9XG4gIGZ1bmN0aW9uIGZpbmRIYW5kbGVycyhlbGVtZW50LCBldmVudCwgZm4sIHNlbGVjdG9yKSB7XG4gICAgZXZlbnQgPSBwYXJzZShldmVudClcbiAgICBpZiAoZXZlbnQubnMpIHZhciBtYXRjaGVyID0gbWF0Y2hlckZvcihldmVudC5ucylcbiAgICByZXR1cm4gKGhhbmRsZXJzW3ppZChlbGVtZW50KV0gfHwgW10pLmZpbHRlcihmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICByZXR1cm4gaGFuZGxlclxuICAgICAgICAmJiAoIWV2ZW50LmUgIHx8IGhhbmRsZXIuZSA9PSBldmVudC5lKVxuICAgICAgICAmJiAoIWV2ZW50Lm5zIHx8IG1hdGNoZXIudGVzdChoYW5kbGVyLm5zKSlcbiAgICAgICAgJiYgKCFmbiAgICAgICB8fCB6aWQoaGFuZGxlci5mbikgPT09IHppZChmbikpXG4gICAgICAgICYmICghc2VsZWN0b3IgfHwgaGFuZGxlci5zZWwgPT0gc2VsZWN0b3IpXG4gICAgfSlcbiAgfVxuICBmdW5jdGlvbiBwYXJzZShldmVudCkge1xuICAgIHZhciBwYXJ0cyA9ICgnJyArIGV2ZW50KS5zcGxpdCgnLicpXG4gICAgcmV0dXJuIHtlOiBwYXJ0c1swXSwgbnM6IHBhcnRzLnNsaWNlKDEpLnNvcnQoKS5qb2luKCcgJyl9XG4gIH1cbiAgZnVuY3Rpb24gbWF0Y2hlckZvcihucykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCcoPzpefCApJyArIG5zLnJlcGxhY2UoJyAnLCAnIC4qID8nKSArICcoPzogfCQpJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2ZW50Q2FwdHVyZShoYW5kbGVyLCBjYXB0dXJlU2V0dGluZykge1xuICAgIHJldHVybiBoYW5kbGVyLmRlbCAmJlxuICAgICAgKCFmb2N1c2luU3VwcG9ydGVkICYmIChoYW5kbGVyLmUgaW4gZm9jdXMpKSB8fFxuICAgICAgISFjYXB0dXJlU2V0dGluZ1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhbEV2ZW50KHR5cGUpIHtcbiAgICByZXR1cm4gaG92ZXJbdHlwZV0gfHwgKGZvY3VzaW5TdXBwb3J0ZWQgJiYgZm9jdXNbdHlwZV0pIHx8IHR5cGVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZChlbGVtZW50LCBldmVudHMsIGZuLCBkYXRhLCBzZWxlY3RvciwgZGVsZWdhdG9yLCBjYXB0dXJlKXtcbiAgICB2YXIgaWQgPSB6aWQoZWxlbWVudCksIHNldCA9IChoYW5kbGVyc1tpZF0gfHwgKGhhbmRsZXJzW2lkXSA9IFtdKSlcbiAgICBldmVudHMuc3BsaXQoL1xccy8pLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgaWYgKGV2ZW50ID09ICdyZWFkeScpIHJldHVybiAkKGRvY3VtZW50KS5yZWFkeShmbilcbiAgICAgIHZhciBoYW5kbGVyICAgPSBwYXJzZShldmVudClcbiAgICAgIGhhbmRsZXIuZm4gICAgPSBmblxuICAgICAgaGFuZGxlci5zZWwgICA9IHNlbGVjdG9yXG4gICAgICAvLyBlbXVsYXRlIG1vdXNlZW50ZXIsIG1vdXNlbGVhdmVcbiAgICAgIGlmIChoYW5kbGVyLmUgaW4gaG92ZXIpIGZuID0gZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciByZWxhdGVkID0gZS5yZWxhdGVkVGFyZ2V0XG4gICAgICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhJC5jb250YWlucyh0aGlzLCByZWxhdGVkKSkpXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZXIuZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgICAgaGFuZGxlci5kZWwgICA9IGRlbGVnYXRvclxuICAgICAgdmFyIGNhbGxiYWNrICA9IGRlbGVnYXRvciB8fCBmblxuICAgICAgaGFuZGxlci5wcm94eSA9IGZ1bmN0aW9uKGUpe1xuICAgICAgICBlID0gY29tcGF0aWJsZShlKVxuICAgICAgICBpZiAoZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSByZXR1cm5cbiAgICAgICAgZS5kYXRhID0gZGF0YVxuICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2suYXBwbHkoZWxlbWVudCwgZS5fYXJncyA9PSB1bmRlZmluZWQgPyBbZV0gOiBbZV0uY29uY2F0KGUuX2FyZ3MpKVxuICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuaSA9IHNldC5sZW5ndGhcbiAgICAgIHNldC5wdXNoKGhhbmRsZXIpXG4gICAgICBpZiAoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGVsZW1lbnQpXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihyZWFsRXZlbnQoaGFuZGxlci5lKSwgaGFuZGxlci5wcm94eSwgZXZlbnRDYXB0dXJlKGhhbmRsZXIsIGNhcHR1cmUpKVxuICAgIH0pXG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQsIGV2ZW50cywgZm4sIHNlbGVjdG9yLCBjYXB0dXJlKXtcbiAgICB2YXIgaWQgPSB6aWQoZWxlbWVudClcbiAgICA7KGV2ZW50cyB8fCAnJykuc3BsaXQoL1xccy8pLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgZmluZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50LCBmbiwgc2VsZWN0b3IpLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcil7XG4gICAgICAgIGRlbGV0ZSBoYW5kbGVyc1tpZF1baGFuZGxlci5pXVxuICAgICAgaWYgKCdyZW1vdmVFdmVudExpc3RlbmVyJyBpbiBlbGVtZW50KVxuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIocmVhbEV2ZW50KGhhbmRsZXIuZSksIGhhbmRsZXIucHJveHksIGV2ZW50Q2FwdHVyZShoYW5kbGVyLCBjYXB0dXJlKSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gICQuZXZlbnQgPSB7IGFkZDogYWRkLCByZW1vdmU6IHJlbW92ZSB9XG5cbiAgJC5wcm94eSA9IGZ1bmN0aW9uKGZuLCBjb250ZXh0KSB7XG4gICAgdmFyIGFyZ3MgPSAoMiBpbiBhcmd1bWVudHMpICYmIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKVxuICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgdmFyIHByb3h5Rm4gPSBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJncyA/IGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkgOiBhcmd1bWVudHMpIH1cbiAgICAgIHByb3h5Rm4uX3ppZCA9IHppZChmbilcbiAgICAgIHJldHVybiBwcm94eUZuXG4gICAgfSBlbHNlIGlmIChpc1N0cmluZyhjb250ZXh0KSkge1xuICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KGZuW2NvbnRleHRdLCBmbilcbiAgICAgICAgcmV0dXJuICQucHJveHkuYXBwbHkobnVsbCwgYXJncylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkLnByb3h5KGZuW2NvbnRleHRdLCBmbilcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImV4cGVjdGVkIGZ1bmN0aW9uXCIpXG4gICAgfVxuICB9XG5cbiAgJC5mbi5iaW5kID0gZnVuY3Rpb24oZXZlbnQsIGRhdGEsIGNhbGxiYWNrKXtcbiAgICByZXR1cm4gdGhpcy5vbihldmVudCwgZGF0YSwgY2FsbGJhY2spXG4gIH1cbiAgJC5mbi51bmJpbmQgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spe1xuICAgIHJldHVybiB0aGlzLm9mZihldmVudCwgY2FsbGJhY2spXG4gIH1cbiAgJC5mbi5vbmUgPSBmdW5jdGlvbihldmVudCwgc2VsZWN0b3IsIGRhdGEsIGNhbGxiYWNrKXtcbiAgICByZXR1cm4gdGhpcy5vbihldmVudCwgc2VsZWN0b3IsIGRhdGEsIGNhbGxiYWNrLCAxKVxuICB9XG5cbiAgdmFyIHJldHVyblRydWUgPSBmdW5jdGlvbigpe3JldHVybiB0cnVlfSxcbiAgICAgIHJldHVybkZhbHNlID0gZnVuY3Rpb24oKXtyZXR1cm4gZmFsc2V9LFxuICAgICAgaWdub3JlUHJvcGVydGllcyA9IC9eKFtBLVpdfHJldHVyblZhbHVlJHxsYXllcltYWV0kKS8sXG4gICAgICBldmVudE1ldGhvZHMgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiAnaXNEZWZhdWx0UHJldmVudGVkJyxcbiAgICAgICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiAnaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQnLFxuICAgICAgICBzdG9wUHJvcGFnYXRpb246ICdpc1Byb3BhZ2F0aW9uU3RvcHBlZCdcbiAgICAgIH1cblxuICBmdW5jdGlvbiBjb21wYXRpYmxlKGV2ZW50LCBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlIHx8ICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHNvdXJjZSB8fCAoc291cmNlID0gZXZlbnQpXG5cbiAgICAgICQuZWFjaChldmVudE1ldGhvZHMsIGZ1bmN0aW9uKG5hbWUsIHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgc291cmNlTWV0aG9kID0gc291cmNlW25hbWVdXG4gICAgICAgIGV2ZW50W25hbWVdID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICB0aGlzW3ByZWRpY2F0ZV0gPSByZXR1cm5UcnVlXG4gICAgICAgICAgcmV0dXJuIHNvdXJjZU1ldGhvZCAmJiBzb3VyY2VNZXRob2QuYXBwbHkoc291cmNlLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRbcHJlZGljYXRlXSA9IHJldHVybkZhbHNlXG4gICAgICB9KVxuXG4gICAgICBpZiAoc291cmNlLmRlZmF1bHRQcmV2ZW50ZWQgIT09IHVuZGVmaW5lZCA/IHNvdXJjZS5kZWZhdWx0UHJldmVudGVkIDpcbiAgICAgICAgICAncmV0dXJuVmFsdWUnIGluIHNvdXJjZSA/IHNvdXJjZS5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgOlxuICAgICAgICAgIHNvdXJjZS5nZXRQcmV2ZW50RGVmYXVsdCAmJiBzb3VyY2UuZ2V0UHJldmVudERlZmF1bHQoKSlcbiAgICAgICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZXZlbnRcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByb3h5KGV2ZW50KSB7XG4gICAgdmFyIGtleSwgcHJveHkgPSB7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50IH1cbiAgICBmb3IgKGtleSBpbiBldmVudClcbiAgICAgIGlmICghaWdub3JlUHJvcGVydGllcy50ZXN0KGtleSkgJiYgZXZlbnRba2V5XSAhPT0gdW5kZWZpbmVkKSBwcm94eVtrZXldID0gZXZlbnRba2V5XVxuXG4gICAgcmV0dXJuIGNvbXBhdGlibGUocHJveHksIGV2ZW50KVxuICB9XG5cbiAgJC5mbi5kZWxlZ2F0ZSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spe1xuICAgIHJldHVybiB0aGlzLm9uKGV2ZW50LCBzZWxlY3RvciwgY2FsbGJhY2spXG4gIH1cbiAgJC5mbi51bmRlbGVnYXRlID0gZnVuY3Rpb24oc2VsZWN0b3IsIGV2ZW50LCBjYWxsYmFjayl7XG4gICAgcmV0dXJuIHRoaXMub2ZmKGV2ZW50LCBzZWxlY3RvciwgY2FsbGJhY2spXG4gIH1cblxuICAkLmZuLmxpdmUgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spe1xuICAgICQoZG9jdW1lbnQuYm9keSkuZGVsZWdhdGUodGhpcy5zZWxlY3RvciwgZXZlbnQsIGNhbGxiYWNrKVxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgJC5mbi5kaWUgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spe1xuICAgICQoZG9jdW1lbnQuYm9keSkudW5kZWxlZ2F0ZSh0aGlzLnNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gICQuZm4ub24gPSBmdW5jdGlvbihldmVudCwgc2VsZWN0b3IsIGRhdGEsIGNhbGxiYWNrLCBvbmUpe1xuICAgIHZhciBhdXRvUmVtb3ZlLCBkZWxlZ2F0b3IsICR0aGlzID0gdGhpc1xuICAgIGlmIChldmVudCAmJiAhaXNTdHJpbmcoZXZlbnQpKSB7XG4gICAgICAkLmVhY2goZXZlbnQsIGZ1bmN0aW9uKHR5cGUsIGZuKXtcbiAgICAgICAgJHRoaXMub24odHlwZSwgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUpXG4gICAgICB9KVxuICAgICAgcmV0dXJuICR0aGlzXG4gICAgfVxuXG4gICAgaWYgKCFpc1N0cmluZyhzZWxlY3RvcikgJiYgIWlzRnVuY3Rpb24oY2FsbGJhY2spICYmIGNhbGxiYWNrICE9PSBmYWxzZSlcbiAgICAgIGNhbGxiYWNrID0gZGF0YSwgZGF0YSA9IHNlbGVjdG9yLCBzZWxlY3RvciA9IHVuZGVmaW5lZFxuICAgIGlmIChpc0Z1bmN0aW9uKGRhdGEpIHx8IGRhdGEgPT09IGZhbHNlKVxuICAgICAgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gdW5kZWZpbmVkXG5cbiAgICBpZiAoY2FsbGJhY2sgPT09IGZhbHNlKSBjYWxsYmFjayA9IHJldHVybkZhbHNlXG5cbiAgICByZXR1cm4gJHRoaXMuZWFjaChmdW5jdGlvbihfLCBlbGVtZW50KXtcbiAgICAgIGlmIChvbmUpIGF1dG9SZW1vdmUgPSBmdW5jdGlvbihlKXtcbiAgICAgICAgcmVtb3ZlKGVsZW1lbnQsIGUudHlwZSwgY2FsbGJhY2spXG4gICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RvcikgZGVsZWdhdG9yID0gZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciBldnQsIG1hdGNoID0gJChlLnRhcmdldCkuY2xvc2VzdChzZWxlY3RvciwgZWxlbWVudCkuZ2V0KDApXG4gICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaCAhPT0gZWxlbWVudCkge1xuICAgICAgICAgIGV2dCA9ICQuZXh0ZW5kKGNyZWF0ZVByb3h5KGUpLCB7Y3VycmVudFRhcmdldDogbWF0Y2gsIGxpdmVGaXJlZDogZWxlbWVudH0pXG4gICAgICAgICAgcmV0dXJuIChhdXRvUmVtb3ZlIHx8IGNhbGxiYWNrKS5hcHBseShtYXRjaCwgW2V2dF0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYWRkKGVsZW1lbnQsIGV2ZW50LCBjYWxsYmFjaywgZGF0YSwgc2VsZWN0b3IsIGRlbGVnYXRvciB8fCBhdXRvUmVtb3ZlKVxuICAgIH0pXG4gIH1cbiAgJC5mbi5vZmYgPSBmdW5jdGlvbihldmVudCwgc2VsZWN0b3IsIGNhbGxiYWNrKXtcbiAgICB2YXIgJHRoaXMgPSB0aGlzXG4gICAgaWYgKGV2ZW50ICYmICFpc1N0cmluZyhldmVudCkpIHtcbiAgICAgICQuZWFjaChldmVudCwgZnVuY3Rpb24odHlwZSwgZm4pe1xuICAgICAgICAkdGhpcy5vZmYodHlwZSwgc2VsZWN0b3IsIGZuKVxuICAgICAgfSlcbiAgICAgIHJldHVybiAkdGhpc1xuICAgIH1cblxuICAgIGlmICghaXNTdHJpbmcoc2VsZWN0b3IpICYmICFpc0Z1bmN0aW9uKGNhbGxiYWNrKSAmJiBjYWxsYmFjayAhPT0gZmFsc2UpXG4gICAgICBjYWxsYmFjayA9IHNlbGVjdG9yLCBzZWxlY3RvciA9IHVuZGVmaW5lZFxuXG4gICAgaWYgKGNhbGxiYWNrID09PSBmYWxzZSkgY2FsbGJhY2sgPSByZXR1cm5GYWxzZVxuXG4gICAgcmV0dXJuICR0aGlzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHJlbW92ZSh0aGlzLCBldmVudCwgY2FsbGJhY2ssIHNlbGVjdG9yKVxuICAgIH0pXG4gIH1cblxuICAkLmZuLnRyaWdnZXIgPSBmdW5jdGlvbihldmVudCwgYXJncyl7XG4gICAgZXZlbnQgPSAoaXNTdHJpbmcoZXZlbnQpIHx8ICQuaXNQbGFpbk9iamVjdChldmVudCkpID8gJC5FdmVudChldmVudCkgOiBjb21wYXRpYmxlKGV2ZW50KVxuICAgIGV2ZW50Ll9hcmdzID0gYXJnc1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIC8vIGhhbmRsZSBmb2N1cygpLCBibHVyKCkgYnkgY2FsbGluZyB0aGVtIGRpcmVjdGx5XG4gICAgICBpZiAoZXZlbnQudHlwZSBpbiBmb2N1cyAmJiB0eXBlb2YgdGhpc1tldmVudC50eXBlXSA9PSBcImZ1bmN0aW9uXCIpIHRoaXNbZXZlbnQudHlwZV0oKVxuICAgICAgLy8gaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24gbWlnaHQgbm90IGJlIERPTSBlbGVtZW50c1xuICAgICAgZWxzZSBpZiAoJ2Rpc3BhdGNoRXZlbnQnIGluIHRoaXMpIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudClcbiAgICAgIGVsc2UgJCh0aGlzKS50cmlnZ2VySGFuZGxlcihldmVudCwgYXJncylcbiAgICB9KVxuICB9XG5cbiAgLy8gdHJpZ2dlcnMgZXZlbnQgaGFuZGxlcnMgb24gY3VycmVudCBlbGVtZW50IGp1c3QgYXMgaWYgYW4gZXZlbnQgb2NjdXJyZWQsXG4gIC8vIGRvZXNuJ3QgdHJpZ2dlciBhbiBhY3R1YWwgZXZlbnQsIGRvZXNuJ3QgYnViYmxlXG4gICQuZm4udHJpZ2dlckhhbmRsZXIgPSBmdW5jdGlvbihldmVudCwgYXJncyl7XG4gICAgdmFyIGUsIHJlc3VsdFxuICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLCBlbGVtZW50KXtcbiAgICAgIGUgPSBjcmVhdGVQcm94eShpc1N0cmluZyhldmVudCkgPyAkLkV2ZW50KGV2ZW50KSA6IGV2ZW50KVxuICAgICAgZS5fYXJncyA9IGFyZ3NcbiAgICAgIGUudGFyZ2V0ID0gZWxlbWVudFxuICAgICAgJC5lYWNoKGZpbmRIYW5kbGVycyhlbGVtZW50LCBldmVudC50eXBlIHx8IGV2ZW50KSwgZnVuY3Rpb24oaSwgaGFuZGxlcil7XG4gICAgICAgIHJlc3VsdCA9IGhhbmRsZXIucHJveHkoZSlcbiAgICAgICAgaWYgKGUuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkgcmV0dXJuIGZhbHNlXG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gc2hvcnRjdXQgbWV0aG9kcyBmb3IgYC5iaW5kKGV2ZW50LCBmbilgIGZvciBlYWNoIGV2ZW50IHR5cGVcbiAgOygnZm9jdXNpbiBmb2N1c291dCBmb2N1cyBibHVyIGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgJytcbiAgJ21vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlICcrXG4gICdjaGFuZ2Ugc2VsZWN0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3InKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAkLmZuW2V2ZW50XSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gKDAgaW4gYXJndW1lbnRzKSA/XG4gICAgICAgIHRoaXMuYmluZChldmVudCwgY2FsbGJhY2spIDpcbiAgICAgICAgdGhpcy50cmlnZ2VyKGV2ZW50KVxuICAgIH1cbiAgfSlcblxuICAkLkV2ZW50ID0gZnVuY3Rpb24odHlwZSwgcHJvcHMpIHtcbiAgICBpZiAoIWlzU3RyaW5nKHR5cGUpKSBwcm9wcyA9IHR5cGUsIHR5cGUgPSBwcm9wcy50eXBlXG4gICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoc3BlY2lhbEV2ZW50c1t0eXBlXSB8fCAnRXZlbnRzJyksIGJ1YmJsZXMgPSB0cnVlXG4gICAgaWYgKHByb3BzKSBmb3IgKHZhciBuYW1lIGluIHByb3BzKSAobmFtZSA9PSAnYnViYmxlcycpID8gKGJ1YmJsZXMgPSAhIXByb3BzW25hbWVdKSA6IChldmVudFtuYW1lXSA9IHByb3BzW25hbWVdKVxuICAgIGV2ZW50LmluaXRFdmVudCh0eXBlLCBidWJibGVzLCB0cnVlKVxuICAgIHJldHVybiBjb21wYXRpYmxlKGV2ZW50KVxuICB9XG5cbn0pKFplcHRvKVxuXG47KGZ1bmN0aW9uKCQpe1xuICB2YXIganNvbnBJRCA9IDAsXG4gICAgICBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcbiAgICAgIGtleSxcbiAgICAgIG5hbWUsXG4gICAgICByc2NyaXB0ID0gLzxzY3JpcHRcXGJbXjxdKig/Oig/ITxcXC9zY3JpcHQ+KTxbXjxdKikqPFxcL3NjcmlwdD4vZ2ksXG4gICAgICBzY3JpcHRUeXBlUkUgPSAvXig/OnRleHR8YXBwbGljYXRpb24pXFwvamF2YXNjcmlwdC9pLFxuICAgICAgeG1sVHlwZVJFID0gL14oPzp0ZXh0fGFwcGxpY2F0aW9uKVxcL3htbC9pLFxuICAgICAganNvblR5cGUgPSAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICBodG1sVHlwZSA9ICd0ZXh0L2h0bWwnLFxuICAgICAgYmxhbmtSRSA9IC9eXFxzKiQvLFxuICAgICAgb3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG5cbiAgb3JpZ2luQW5jaG9yLmhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuXG4gIC8vIHRyaWdnZXIgYSBjdXN0b20gZXZlbnQgYW5kIHJldHVybiBmYWxzZSBpZiBpdCB3YXMgY2FuY2VsbGVkXG4gIGZ1bmN0aW9uIHRyaWdnZXJBbmRSZXR1cm4oY29udGV4dCwgZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgdmFyIGV2ZW50ID0gJC5FdmVudChldmVudE5hbWUpXG4gICAgJChjb250ZXh0KS50cmlnZ2VyKGV2ZW50LCBkYXRhKVxuICAgIHJldHVybiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKClcbiAgfVxuXG4gIC8vIHRyaWdnZXIgYW4gQWpheCBcImdsb2JhbFwiIGV2ZW50XG4gIGZ1bmN0aW9uIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIGNvbnRleHQsIGV2ZW50TmFtZSwgZGF0YSkge1xuICAgIGlmIChzZXR0aW5ncy5nbG9iYWwpIHJldHVybiB0cmlnZ2VyQW5kUmV0dXJuKGNvbnRleHQgfHwgZG9jdW1lbnQsIGV2ZW50TmFtZSwgZGF0YSlcbiAgfVxuXG4gIC8vIE51bWJlciBvZiBhY3RpdmUgQWpheCByZXF1ZXN0c1xuICAkLmFjdGl2ZSA9IDBcblxuICBmdW5jdGlvbiBhamF4U3RhcnQoc2V0dGluZ3MpIHtcbiAgICBpZiAoc2V0dGluZ3MuZ2xvYmFsICYmICQuYWN0aXZlKysgPT09IDApIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIG51bGwsICdhamF4U3RhcnQnKVxuICB9XG4gIGZ1bmN0aW9uIGFqYXhTdG9wKHNldHRpbmdzKSB7XG4gICAgaWYgKHNldHRpbmdzLmdsb2JhbCAmJiAhKC0tJC5hY3RpdmUpKSB0cmlnZ2VyR2xvYmFsKHNldHRpbmdzLCBudWxsLCAnYWpheFN0b3AnKVxuICB9XG5cbiAgLy8gdHJpZ2dlcnMgYW4gZXh0cmEgZ2xvYmFsIGV2ZW50IFwiYWpheEJlZm9yZVNlbmRcIiB0aGF0J3MgbGlrZSBcImFqYXhTZW5kXCIgYnV0IGNhbmNlbGFibGVcbiAgZnVuY3Rpb24gYWpheEJlZm9yZVNlbmQoeGhyLCBzZXR0aW5ncykge1xuICAgIHZhciBjb250ZXh0ID0gc2V0dGluZ3MuY29udGV4dFxuICAgIGlmIChzZXR0aW5ncy5iZWZvcmVTZW5kLmNhbGwoY29udGV4dCwgeGhyLCBzZXR0aW5ncykgPT09IGZhbHNlIHx8XG4gICAgICAgIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIGNvbnRleHQsICdhamF4QmVmb3JlU2VuZCcsIFt4aHIsIHNldHRpbmdzXSkgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgICB0cmlnZ2VyR2xvYmFsKHNldHRpbmdzLCBjb250ZXh0LCAnYWpheFNlbmQnLCBbeGhyLCBzZXR0aW5nc10pXG4gIH1cbiAgZnVuY3Rpb24gYWpheFN1Y2Nlc3MoZGF0YSwgeGhyLCBzZXR0aW5ncywgZGVmZXJyZWQpIHtcbiAgICB2YXIgY29udGV4dCA9IHNldHRpbmdzLmNvbnRleHQsIHN0YXR1cyA9ICdzdWNjZXNzJ1xuICAgIHNldHRpbmdzLnN1Y2Nlc3MuY2FsbChjb250ZXh0LCBkYXRhLCBzdGF0dXMsIHhocilcbiAgICBpZiAoZGVmZXJyZWQpIGRlZmVycmVkLnJlc29sdmVXaXRoKGNvbnRleHQsIFtkYXRhLCBzdGF0dXMsIHhocl0pXG4gICAgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgY29udGV4dCwgJ2FqYXhTdWNjZXNzJywgW3hociwgc2V0dGluZ3MsIGRhdGFdKVxuICAgIGFqYXhDb21wbGV0ZShzdGF0dXMsIHhociwgc2V0dGluZ3MpXG4gIH1cbiAgLy8gdHlwZTogXCJ0aW1lb3V0XCIsIFwiZXJyb3JcIiwgXCJhYm9ydFwiLCBcInBhcnNlcmVycm9yXCJcbiAgZnVuY3Rpb24gYWpheEVycm9yKGVycm9yLCB0eXBlLCB4aHIsIHNldHRpbmdzLCBkZWZlcnJlZCkge1xuICAgIHZhciBjb250ZXh0ID0gc2V0dGluZ3MuY29udGV4dFxuICAgIHNldHRpbmdzLmVycm9yLmNhbGwoY29udGV4dCwgeGhyLCB0eXBlLCBlcnJvcilcbiAgICBpZiAoZGVmZXJyZWQpIGRlZmVycmVkLnJlamVjdFdpdGgoY29udGV4dCwgW3hociwgdHlwZSwgZXJyb3JdKVxuICAgIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIGNvbnRleHQsICdhamF4RXJyb3InLCBbeGhyLCBzZXR0aW5ncywgZXJyb3IgfHwgdHlwZV0pXG4gICAgYWpheENvbXBsZXRlKHR5cGUsIHhociwgc2V0dGluZ3MpXG4gIH1cbiAgLy8gc3RhdHVzOiBcInN1Y2Nlc3NcIiwgXCJub3Rtb2RpZmllZFwiLCBcImVycm9yXCIsIFwidGltZW91dFwiLCBcImFib3J0XCIsIFwicGFyc2VyZXJyb3JcIlxuICBmdW5jdGlvbiBhamF4Q29tcGxldGUoc3RhdHVzLCB4aHIsIHNldHRpbmdzKSB7XG4gICAgdmFyIGNvbnRleHQgPSBzZXR0aW5ncy5jb250ZXh0XG4gICAgc2V0dGluZ3MuY29tcGxldGUuY2FsbChjb250ZXh0LCB4aHIsIHN0YXR1cylcbiAgICB0cmlnZ2VyR2xvYmFsKHNldHRpbmdzLCBjb250ZXh0LCAnYWpheENvbXBsZXRlJywgW3hociwgc2V0dGluZ3NdKVxuICAgIGFqYXhTdG9wKHNldHRpbmdzKVxuICB9XG5cbiAgLy8gRW1wdHkgZnVuY3Rpb24sIHVzZWQgYXMgZGVmYXVsdCBjYWxsYmFja1xuICBmdW5jdGlvbiBlbXB0eSgpIHt9XG5cbiAgJC5hamF4SlNPTlAgPSBmdW5jdGlvbihvcHRpb25zLCBkZWZlcnJlZCl7XG4gICAgaWYgKCEoJ3R5cGUnIGluIG9wdGlvbnMpKSByZXR1cm4gJC5hamF4KG9wdGlvbnMpXG5cbiAgICB2YXIgX2NhbGxiYWNrTmFtZSA9IG9wdGlvbnMuanNvbnBDYWxsYmFjayxcbiAgICAgIGNhbGxiYWNrTmFtZSA9ICgkLmlzRnVuY3Rpb24oX2NhbGxiYWNrTmFtZSkgP1xuICAgICAgICBfY2FsbGJhY2tOYW1lKCkgOiBfY2FsbGJhY2tOYW1lKSB8fCAoJ2pzb25wJyArICgrK2pzb25wSUQpKSxcbiAgICAgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLFxuICAgICAgb3JpZ2luYWxDYWxsYmFjayA9IHdpbmRvd1tjYWxsYmFja05hbWVdLFxuICAgICAgcmVzcG9uc2VEYXRhLFxuICAgICAgYWJvcnQgPSBmdW5jdGlvbihlcnJvclR5cGUpIHtcbiAgICAgICAgJChzY3JpcHQpLnRyaWdnZXJIYW5kbGVyKCdlcnJvcicsIGVycm9yVHlwZSB8fCAnYWJvcnQnKVxuICAgICAgfSxcbiAgICAgIHhociA9IHsgYWJvcnQ6IGFib3J0IH0sIGFib3J0VGltZW91dFxuXG4gICAgaWYgKGRlZmVycmVkKSBkZWZlcnJlZC5wcm9taXNlKHhocilcblxuICAgICQoc2NyaXB0KS5vbignbG9hZCBlcnJvcicsIGZ1bmN0aW9uKGUsIGVycm9yVHlwZSl7XG4gICAgICBjbGVhclRpbWVvdXQoYWJvcnRUaW1lb3V0KVxuICAgICAgJChzY3JpcHQpLm9mZigpLnJlbW92ZSgpXG5cbiAgICAgIGlmIChlLnR5cGUgPT0gJ2Vycm9yJyB8fCAhcmVzcG9uc2VEYXRhKSB7XG4gICAgICAgIGFqYXhFcnJvcihudWxsLCBlcnJvclR5cGUgfHwgJ2Vycm9yJywgeGhyLCBvcHRpb25zLCBkZWZlcnJlZClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFqYXhTdWNjZXNzKHJlc3BvbnNlRGF0YVswXSwgeGhyLCBvcHRpb25zLCBkZWZlcnJlZClcbiAgICAgIH1cblxuICAgICAgd2luZG93W2NhbGxiYWNrTmFtZV0gPSBvcmlnaW5hbENhbGxiYWNrXG4gICAgICBpZiAocmVzcG9uc2VEYXRhICYmICQuaXNGdW5jdGlvbihvcmlnaW5hbENhbGxiYWNrKSlcbiAgICAgICAgb3JpZ2luYWxDYWxsYmFjayhyZXNwb25zZURhdGFbMF0pXG5cbiAgICAgIG9yaWdpbmFsQ2FsbGJhY2sgPSByZXNwb25zZURhdGEgPSB1bmRlZmluZWRcbiAgICB9KVxuXG4gICAgaWYgKGFqYXhCZWZvcmVTZW5kKHhociwgb3B0aW9ucykgPT09IGZhbHNlKSB7XG4gICAgICBhYm9ydCgnYWJvcnQnKVxuICAgICAgcmV0dXJuIHhoclxuICAgIH1cblxuICAgIHdpbmRvd1tjYWxsYmFja05hbWVdID0gZnVuY3Rpb24oKXtcbiAgICAgIHJlc3BvbnNlRGF0YSA9IGFyZ3VtZW50c1xuICAgIH1cblxuICAgIHNjcmlwdC5zcmMgPSBvcHRpb25zLnVybC5yZXBsYWNlKC9cXD8oLispPVxcPy8sICc/JDE9JyArIGNhbGxiYWNrTmFtZSlcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcblxuICAgIGlmIChvcHRpb25zLnRpbWVvdXQgPiAwKSBhYm9ydFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBhYm9ydCgndGltZW91dCcpXG4gICAgfSwgb3B0aW9ucy50aW1lb3V0KVxuXG4gICAgcmV0dXJuIHhoclxuICB9XG5cbiAgJC5hamF4U2V0dGluZ3MgPSB7XG4gICAgLy8gRGVmYXVsdCB0eXBlIG9mIHJlcXVlc3RcbiAgICB0eXBlOiAnR0VUJyxcbiAgICAvLyBDYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGJlZm9yZSByZXF1ZXN0XG4gICAgYmVmb3JlU2VuZDogZW1wdHksXG4gICAgLy8gQ2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkc1xuICAgIHN1Y2Nlc3M6IGVtcHR5LFxuICAgIC8vIENhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgdGhlIHRoZSBzZXJ2ZXIgZHJvcHMgZXJyb3JcbiAgICBlcnJvcjogZW1wdHksXG4gICAgLy8gQ2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBvbiByZXF1ZXN0IGNvbXBsZXRlIChib3RoOiBlcnJvciBhbmQgc3VjY2VzcylcbiAgICBjb21wbGV0ZTogZW1wdHksXG4gICAgLy8gVGhlIGNvbnRleHQgZm9yIHRoZSBjYWxsYmFja3NcbiAgICBjb250ZXh0OiBudWxsLFxuICAgIC8vIFdoZXRoZXIgdG8gdHJpZ2dlciBcImdsb2JhbFwiIEFqYXggZXZlbnRzXG4gICAgZ2xvYmFsOiB0cnVlLFxuICAgIC8vIFRyYW5zcG9ydFxuICAgIHhocjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKVxuICAgIH0sXG4gICAgLy8gTUlNRSB0eXBlcyBtYXBwaW5nXG4gICAgLy8gSUlTIHJldHVybnMgSmF2YXNjcmlwdCBhcyBcImFwcGxpY2F0aW9uL3gtamF2YXNjcmlwdFwiXG4gICAgYWNjZXB0czoge1xuICAgICAgc2NyaXB0OiAndGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQnLFxuICAgICAganNvbjogICBqc29uVHlwZSxcbiAgICAgIHhtbDogICAgJ2FwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwnLFxuICAgICAgaHRtbDogICBodG1sVHlwZSxcbiAgICAgIHRleHQ6ICAgJ3RleHQvcGxhaW4nXG4gICAgfSxcbiAgICAvLyBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIHRvIGFub3RoZXIgZG9tYWluXG4gICAgY3Jvc3NEb21haW46IGZhbHNlLFxuICAgIC8vIERlZmF1bHQgdGltZW91dFxuICAgIHRpbWVvdXQ6IDAsXG4gICAgLy8gV2hldGhlciBkYXRhIHNob3VsZCBiZSBzZXJpYWxpemVkIHRvIHN0cmluZ1xuICAgIHByb2Nlc3NEYXRhOiB0cnVlLFxuICAgIC8vIFdoZXRoZXIgdGhlIGJyb3dzZXIgc2hvdWxkIGJlIGFsbG93ZWQgdG8gY2FjaGUgR0VUIHJlc3BvbnNlc1xuICAgIGNhY2hlOiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBtaW1lVG9EYXRhVHlwZShtaW1lKSB7XG4gICAgaWYgKG1pbWUpIG1pbWUgPSBtaW1lLnNwbGl0KCc7JywgMilbMF1cbiAgICByZXR1cm4gbWltZSAmJiAoIG1pbWUgPT0gaHRtbFR5cGUgPyAnaHRtbCcgOlxuICAgICAgbWltZSA9PSBqc29uVHlwZSA/ICdqc29uJyA6XG4gICAgICBzY3JpcHRUeXBlUkUudGVzdChtaW1lKSA/ICdzY3JpcHQnIDpcbiAgICAgIHhtbFR5cGVSRS50ZXN0KG1pbWUpICYmICd4bWwnICkgfHwgJ3RleHQnXG4gIH1cblxuICBmdW5jdGlvbiBhcHBlbmRRdWVyeSh1cmwsIHF1ZXJ5KSB7XG4gICAgaWYgKHF1ZXJ5ID09ICcnKSByZXR1cm4gdXJsXG4gICAgcmV0dXJuICh1cmwgKyAnJicgKyBxdWVyeSkucmVwbGFjZSgvWyY/XXsxLDJ9LywgJz8nKVxuICB9XG5cbiAgLy8gc2VyaWFsaXplIHBheWxvYWQgYW5kIGFwcGVuZCBpdCB0byB0aGUgVVJMIGZvciBHRVQgcmVxdWVzdHNcbiAgZnVuY3Rpb24gc2VyaWFsaXplRGF0YShvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucHJvY2Vzc0RhdGEgJiYgb3B0aW9ucy5kYXRhICYmICQudHlwZShvcHRpb25zLmRhdGEpICE9IFwic3RyaW5nXCIpXG4gICAgICBvcHRpb25zLmRhdGEgPSAkLnBhcmFtKG9wdGlvbnMuZGF0YSwgb3B0aW9ucy50cmFkaXRpb25hbClcbiAgICBpZiAob3B0aW9ucy5kYXRhICYmICghb3B0aW9ucy50eXBlIHx8IG9wdGlvbnMudHlwZS50b1VwcGVyQ2FzZSgpID09ICdHRVQnKSlcbiAgICAgIG9wdGlvbnMudXJsID0gYXBwZW5kUXVlcnkob3B0aW9ucy51cmwsIG9wdGlvbnMuZGF0YSksIG9wdGlvbnMuZGF0YSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgJC5hamF4ID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe30sIG9wdGlvbnMgfHwge30pLFxuICAgICAgICBkZWZlcnJlZCA9ICQuRGVmZXJyZWQgJiYgJC5EZWZlcnJlZCgpLFxuICAgICAgICB1cmxBbmNob3JcbiAgICBmb3IgKGtleSBpbiAkLmFqYXhTZXR0aW5ncykgaWYgKHNldHRpbmdzW2tleV0gPT09IHVuZGVmaW5lZCkgc2V0dGluZ3Nba2V5XSA9ICQuYWpheFNldHRpbmdzW2tleV1cblxuICAgIGFqYXhTdGFydChzZXR0aW5ncylcblxuICAgIGlmICghc2V0dGluZ3MuY3Jvc3NEb21haW4pIHtcbiAgICAgIHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuICAgICAgdXJsQW5jaG9yLmhyZWYgPSBzZXR0aW5ncy51cmxcbiAgICAgIHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWZcbiAgICAgIHNldHRpbmdzLmNyb3NzRG9tYWluID0gKG9yaWdpbkFuY2hvci5wcm90b2NvbCArICcvLycgKyBvcmlnaW5BbmNob3IuaG9zdCkgIT09ICh1cmxBbmNob3IucHJvdG9jb2wgKyAnLy8nICsgdXJsQW5jaG9yLmhvc3QpXG4gICAgfVxuXG4gICAgaWYgKCFzZXR0aW5ncy51cmwpIHNldHRpbmdzLnVybCA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpXG4gICAgc2VyaWFsaXplRGF0YShzZXR0aW5ncylcblxuICAgIHZhciBkYXRhVHlwZSA9IHNldHRpbmdzLmRhdGFUeXBlLCBoYXNQbGFjZWhvbGRlciA9IC9cXD8uKz1cXD8vLnRlc3Qoc2V0dGluZ3MudXJsKVxuICAgIGlmIChoYXNQbGFjZWhvbGRlcikgZGF0YVR5cGUgPSAnanNvbnAnXG5cbiAgICBpZiAoc2V0dGluZ3MuY2FjaGUgPT09IGZhbHNlIHx8IChcbiAgICAgICAgICghb3B0aW9ucyB8fCBvcHRpb25zLmNhY2hlICE9PSB0cnVlKSAmJlxuICAgICAgICAgKCdzY3JpcHQnID09IGRhdGFUeXBlIHx8ICdqc29ucCcgPT0gZGF0YVR5cGUpXG4gICAgICAgICkpXG4gICAgICBzZXR0aW5ncy51cmwgPSBhcHBlbmRRdWVyeShzZXR0aW5ncy51cmwsICdfPScgKyBEYXRlLm5vdygpKVxuXG4gICAgaWYgKCdqc29ucCcgPT0gZGF0YVR5cGUpIHtcbiAgICAgIGlmICghaGFzUGxhY2Vob2xkZXIpXG4gICAgICAgIHNldHRpbmdzLnVybCA9IGFwcGVuZFF1ZXJ5KHNldHRpbmdzLnVybCxcbiAgICAgICAgICBzZXR0aW5ncy5qc29ucCA/IChzZXR0aW5ncy5qc29ucCArICc9PycpIDogc2V0dGluZ3MuanNvbnAgPT09IGZhbHNlID8gJycgOiAnY2FsbGJhY2s9PycpXG4gICAgICByZXR1cm4gJC5hamF4SlNPTlAoc2V0dGluZ3MsIGRlZmVycmVkKVxuICAgIH1cblxuICAgIHZhciBtaW1lID0gc2V0dGluZ3MuYWNjZXB0c1tkYXRhVHlwZV0sXG4gICAgICAgIGhlYWRlcnMgPSB7IH0sXG4gICAgICAgIHNldEhlYWRlciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7IGhlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IFtuYW1lLCB2YWx1ZV0gfSxcbiAgICAgICAgcHJvdG9jb2wgPSAvXihbXFx3LV0rOilcXC9cXC8vLnRlc3Qoc2V0dGluZ3MudXJsKSA/IFJlZ0V4cC4kMSA6IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCxcbiAgICAgICAgeGhyID0gc2V0dGluZ3MueGhyKCksXG4gICAgICAgIG5hdGl2ZVNldEhlYWRlciA9IHhoci5zZXRSZXF1ZXN0SGVhZGVyLFxuICAgICAgICBhYm9ydFRpbWVvdXRcblxuICAgIGlmIChkZWZlcnJlZCkgZGVmZXJyZWQucHJvbWlzZSh4aHIpXG5cbiAgICBpZiAoIXNldHRpbmdzLmNyb3NzRG9tYWluKSBzZXRIZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCAnWE1MSHR0cFJlcXVlc3QnKVxuICAgIHNldEhlYWRlcignQWNjZXB0JywgbWltZSB8fCAnKi8qJylcbiAgICBpZiAobWltZSA9IHNldHRpbmdzLm1pbWVUeXBlIHx8IG1pbWUpIHtcbiAgICAgIGlmIChtaW1lLmluZGV4T2YoJywnKSA+IC0xKSBtaW1lID0gbWltZS5zcGxpdCgnLCcsIDIpWzBdXG4gICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZShtaW1lKVxuICAgIH1cbiAgICBpZiAoc2V0dGluZ3MuY29udGVudFR5cGUgfHwgKHNldHRpbmdzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSAmJiBzZXR0aW5ncy5kYXRhICYmIHNldHRpbmdzLnR5cGUudG9VcHBlckNhc2UoKSAhPSAnR0VUJykpXG4gICAgICBzZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIHNldHRpbmdzLmNvbnRlbnRUeXBlIHx8ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKVxuXG4gICAgaWYgKHNldHRpbmdzLmhlYWRlcnMpIGZvciAobmFtZSBpbiBzZXR0aW5ncy5oZWFkZXJzKSBzZXRIZWFkZXIobmFtZSwgc2V0dGluZ3MuaGVhZGVyc1tuYW1lXSlcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlciA9IHNldEhlYWRlclxuXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCl7XG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHlcbiAgICAgICAgY2xlYXJUaW1lb3V0KGFib3J0VGltZW91dClcbiAgICAgICAgdmFyIHJlc3VsdCwgZXJyb3IgPSBmYWxzZVxuICAgICAgICBpZiAoKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHx8IHhoci5zdGF0dXMgPT0gMzA0IHx8ICh4aHIuc3RhdHVzID09IDAgJiYgcHJvdG9jb2wgPT0gJ2ZpbGU6JykpIHtcbiAgICAgICAgICBkYXRhVHlwZSA9IGRhdGFUeXBlIHx8IG1pbWVUb0RhdGFUeXBlKHNldHRpbmdzLm1pbWVUeXBlIHx8IHhoci5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJykpXG4gICAgICAgICAgcmVzdWx0ID0geGhyLnJlc3BvbnNlVGV4dFxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9wZXJmZWN0aW9ua2lsbHMuY29tL2dsb2JhbC1ldmFsLXdoYXQtYXJlLXRoZS1vcHRpb25zL1xuICAgICAgICAgICAgaWYgKGRhdGFUeXBlID09ICdzY3JpcHQnKSAgICAoMSxldmFsKShyZXN1bHQpXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhVHlwZSA9PSAneG1sJykgIHJlc3VsdCA9IHhoci5yZXNwb25zZVhNTFxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YVR5cGUgPT0gJ2pzb24nKSByZXN1bHQgPSBibGFua1JFLnRlc3QocmVzdWx0KSA/IG51bGwgOiAkLnBhcnNlSlNPTihyZXN1bHQpXG4gICAgICAgICAgfSBjYXRjaCAoZSkgeyBlcnJvciA9IGUgfVxuXG4gICAgICAgICAgaWYgKGVycm9yKSBhamF4RXJyb3IoZXJyb3IsICdwYXJzZXJlcnJvcicsIHhociwgc2V0dGluZ3MsIGRlZmVycmVkKVxuICAgICAgICAgIGVsc2UgYWpheFN1Y2Nlc3MocmVzdWx0LCB4aHIsIHNldHRpbmdzLCBkZWZlcnJlZClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhamF4RXJyb3IoeGhyLnN0YXR1c1RleHQgfHwgbnVsbCwgeGhyLnN0YXR1cyA/ICdlcnJvcicgOiAnYWJvcnQnLCB4aHIsIHNldHRpbmdzLCBkZWZlcnJlZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhamF4QmVmb3JlU2VuZCh4aHIsIHNldHRpbmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgIHhoci5hYm9ydCgpXG4gICAgICBhamF4RXJyb3IobnVsbCwgJ2Fib3J0JywgeGhyLCBzZXR0aW5ncywgZGVmZXJyZWQpXG4gICAgICByZXR1cm4geGhyXG4gICAgfVxuXG4gICAgaWYgKHNldHRpbmdzLnhockZpZWxkcykgZm9yIChuYW1lIGluIHNldHRpbmdzLnhockZpZWxkcykgeGhyW25hbWVdID0gc2V0dGluZ3MueGhyRmllbGRzW25hbWVdXG5cbiAgICB2YXIgYXN5bmMgPSAnYXN5bmMnIGluIHNldHRpbmdzID8gc2V0dGluZ3MuYXN5bmMgOiB0cnVlXG4gICAgeGhyLm9wZW4oc2V0dGluZ3MudHlwZSwgc2V0dGluZ3MudXJsLCBhc3luYywgc2V0dGluZ3MudXNlcm5hbWUsIHNldHRpbmdzLnBhc3N3b3JkKVxuXG4gICAgZm9yIChuYW1lIGluIGhlYWRlcnMpIG5hdGl2ZVNldEhlYWRlci5hcHBseSh4aHIsIGhlYWRlcnNbbmFtZV0pXG5cbiAgICBpZiAoc2V0dGluZ3MudGltZW91dCA+IDApIGFib3J0VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5XG4gICAgICAgIHhoci5hYm9ydCgpXG4gICAgICAgIGFqYXhFcnJvcihudWxsLCAndGltZW91dCcsIHhociwgc2V0dGluZ3MsIGRlZmVycmVkKVxuICAgICAgfSwgc2V0dGluZ3MudGltZW91dClcblxuICAgIC8vIGF2b2lkIHNlbmRpbmcgZW1wdHkgc3RyaW5nICgjMzE5KVxuICAgIHhoci5zZW5kKHNldHRpbmdzLmRhdGEgPyBzZXR0aW5ncy5kYXRhIDogbnVsbClcbiAgICByZXR1cm4geGhyXG4gIH1cblxuICAvLyBoYW5kbGUgb3B0aW9uYWwgZGF0YS9zdWNjZXNzIGFyZ3VtZW50c1xuICBmdW5jdGlvbiBwYXJzZUFyZ3VtZW50cyh1cmwsIGRhdGEsIHN1Y2Nlc3MsIGRhdGFUeXBlKSB7XG4gICAgaWYgKCQuaXNGdW5jdGlvbihkYXRhKSkgZGF0YVR5cGUgPSBzdWNjZXNzLCBzdWNjZXNzID0gZGF0YSwgZGF0YSA9IHVuZGVmaW5lZFxuICAgIGlmICghJC5pc0Z1bmN0aW9uKHN1Y2Nlc3MpKSBkYXRhVHlwZSA9IHN1Y2Nlc3MsIHN1Y2Nlc3MgPSB1bmRlZmluZWRcbiAgICByZXR1cm4ge1xuICAgICAgdXJsOiB1cmxcbiAgICAsIGRhdGE6IGRhdGFcbiAgICAsIHN1Y2Nlc3M6IHN1Y2Nlc3NcbiAgICAsIGRhdGFUeXBlOiBkYXRhVHlwZVxuICAgIH1cbiAgfVxuXG4gICQuZ2V0ID0gZnVuY3Rpb24oLyogdXJsLCBkYXRhLCBzdWNjZXNzLCBkYXRhVHlwZSAqLyl7XG4gICAgcmV0dXJuICQuYWpheChwYXJzZUFyZ3VtZW50cy5hcHBseShudWxsLCBhcmd1bWVudHMpKVxuICB9XG5cbiAgJC5wb3N0ID0gZnVuY3Rpb24oLyogdXJsLCBkYXRhLCBzdWNjZXNzLCBkYXRhVHlwZSAqLyl7XG4gICAgdmFyIG9wdGlvbnMgPSBwYXJzZUFyZ3VtZW50cy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgb3B0aW9ucy50eXBlID0gJ1BPU1QnXG4gICAgcmV0dXJuICQuYWpheChvcHRpb25zKVxuICB9XG5cbiAgJC5nZXRKU09OID0gZnVuY3Rpb24oLyogdXJsLCBkYXRhLCBzdWNjZXNzICovKXtcbiAgICB2YXIgb3B0aW9ucyA9IHBhcnNlQXJndW1lbnRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICBvcHRpb25zLmRhdGFUeXBlID0gJ2pzb24nXG4gICAgcmV0dXJuICQuYWpheChvcHRpb25zKVxuICB9XG5cbiAgJC5mbi5sb2FkID0gZnVuY3Rpb24odXJsLCBkYXRhLCBzdWNjZXNzKXtcbiAgICBpZiAoIXRoaXMubGVuZ3RoKSByZXR1cm4gdGhpc1xuICAgIHZhciBzZWxmID0gdGhpcywgcGFydHMgPSB1cmwuc3BsaXQoL1xccy8pLCBzZWxlY3RvcixcbiAgICAgICAgb3B0aW9ucyA9IHBhcnNlQXJndW1lbnRzKHVybCwgZGF0YSwgc3VjY2VzcyksXG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucy5zdWNjZXNzXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIG9wdGlvbnMudXJsID0gcGFydHNbMF0sIHNlbGVjdG9yID0gcGFydHNbMV1cbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICBzZWxmLmh0bWwoc2VsZWN0b3IgP1xuICAgICAgICAkKCc8ZGl2PicpLmh0bWwocmVzcG9uc2UucmVwbGFjZShyc2NyaXB0LCBcIlwiKSkuZmluZChzZWxlY3RvcilcbiAgICAgICAgOiByZXNwb25zZSlcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmFwcGx5KHNlbGYsIGFyZ3VtZW50cylcbiAgICB9XG4gICAgJC5hamF4KG9wdGlvbnMpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBlc2NhcGUgPSBlbmNvZGVVUklDb21wb25lbnRcblxuICBmdW5jdGlvbiBzZXJpYWxpemUocGFyYW1zLCBvYmosIHRyYWRpdGlvbmFsLCBzY29wZSl7XG4gICAgdmFyIHR5cGUsIGFycmF5ID0gJC5pc0FycmF5KG9iaiksIGhhc2ggPSAkLmlzUGxhaW5PYmplY3Qob2JqKVxuICAgICQuZWFjaChvYmosIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHR5cGUgPSAkLnR5cGUodmFsdWUpXG4gICAgICBpZiAoc2NvcGUpIGtleSA9IHRyYWRpdGlvbmFsID8gc2NvcGUgOlxuICAgICAgICBzY29wZSArICdbJyArIChoYXNoIHx8IHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnYXJyYXknID8ga2V5IDogJycpICsgJ10nXG4gICAgICAvLyBoYW5kbGUgZGF0YSBpbiBzZXJpYWxpemVBcnJheSgpIGZvcm1hdFxuICAgICAgaWYgKCFzY29wZSAmJiBhcnJheSkgcGFyYW1zLmFkZCh2YWx1ZS5uYW1lLCB2YWx1ZS52YWx1ZSlcbiAgICAgIC8vIHJlY3Vyc2UgaW50byBuZXN0ZWQgb2JqZWN0c1xuICAgICAgZWxzZSBpZiAodHlwZSA9PSBcImFycmF5XCIgfHwgKCF0cmFkaXRpb25hbCAmJiB0eXBlID09IFwib2JqZWN0XCIpKVxuICAgICAgICBzZXJpYWxpemUocGFyYW1zLCB2YWx1ZSwgdHJhZGl0aW9uYWwsIGtleSlcbiAgICAgIGVsc2UgcGFyYW1zLmFkZChrZXksIHZhbHVlKVxuICAgIH0pXG4gIH1cblxuICAkLnBhcmFtID0gZnVuY3Rpb24ob2JqLCB0cmFkaXRpb25hbCl7XG4gICAgdmFyIHBhcmFtcyA9IFtdXG4gICAgcGFyYW1zLmFkZCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24odmFsdWUpKSB2YWx1ZSA9IHZhbHVlKClcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB2YWx1ZSA9IFwiXCJcbiAgICAgIHRoaXMucHVzaChlc2NhcGUoa2V5KSArICc9JyArIGVzY2FwZSh2YWx1ZSkpXG4gICAgfVxuICAgIHNlcmlhbGl6ZShwYXJhbXMsIG9iaiwgdHJhZGl0aW9uYWwpXG4gICAgcmV0dXJuIHBhcmFtcy5qb2luKCcmJykucmVwbGFjZSgvJTIwL2csICcrJylcbiAgfVxufSkoWmVwdG8pXG5cbjsoZnVuY3Rpb24oJCl7XG4gICQuZm4uc2VyaWFsaXplQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmFtZSwgdHlwZSwgcmVzdWx0ID0gW10sXG4gICAgICBhZGQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUuZm9yRWFjaCkgcmV0dXJuIHZhbHVlLmZvckVhY2goYWRkKVxuICAgICAgICByZXN1bHQucHVzaCh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9KVxuICAgICAgfVxuICAgIGlmICh0aGlzWzBdKSAkLmVhY2godGhpc1swXS5lbGVtZW50cywgZnVuY3Rpb24oXywgZmllbGQpe1xuICAgICAgdHlwZSA9IGZpZWxkLnR5cGUsIG5hbWUgPSBmaWVsZC5uYW1lXG4gICAgICBpZiAobmFtZSAmJiBmaWVsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9ICdmaWVsZHNldCcgJiZcbiAgICAgICAgIWZpZWxkLmRpc2FibGVkICYmIHR5cGUgIT0gJ3N1Ym1pdCcgJiYgdHlwZSAhPSAncmVzZXQnICYmIHR5cGUgIT0gJ2J1dHRvbicgJiYgdHlwZSAhPSAnZmlsZScgJiZcbiAgICAgICAgKCh0eXBlICE9ICdyYWRpbycgJiYgdHlwZSAhPSAnY2hlY2tib3gnKSB8fCBmaWVsZC5jaGVja2VkKSlcbiAgICAgICAgICBhZGQoJChmaWVsZCkudmFsKCkpXG4gICAgfSlcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAkLmZuLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHJlc3VsdCA9IFtdXG4gICAgdGhpcy5zZXJpYWxpemVBcnJheSgpLmZvckVhY2goZnVuY3Rpb24oZWxtKXtcbiAgICAgIHJlc3VsdC5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChlbG0ubmFtZSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoZWxtLnZhbHVlKSlcbiAgICB9KVxuICAgIHJldHVybiByZXN1bHQuam9pbignJicpXG4gIH1cblxuICAkLmZuLnN1Ym1pdCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKDAgaW4gYXJndW1lbnRzKSB0aGlzLmJpbmQoJ3N1Ym1pdCcsIGNhbGxiYWNrKVxuICAgIGVsc2UgaWYgKHRoaXMubGVuZ3RoKSB7XG4gICAgICB2YXIgZXZlbnQgPSAkLkV2ZW50KCdzdWJtaXQnKVxuICAgICAgdGhpcy5lcSgwKS50cmlnZ2VyKGV2ZW50KVxuICAgICAgaWYgKCFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgdGhpcy5nZXQoMCkuc3VibWl0KClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG59KShaZXB0bylcblxuOyhmdW5jdGlvbigkKXtcbiAgLy8gX19wcm90b19fIGRvZXNuJ3QgZXhpc3Qgb24gSUU8MTEsIHNvIHJlZGVmaW5lXG4gIC8vIHRoZSBaIGZ1bmN0aW9uIHRvIHVzZSBvYmplY3QgZXh0ZW5zaW9uIGluc3RlYWRcbiAgaWYgKCEoJ19fcHJvdG9fXycgaW4ge30pKSB7XG4gICAgJC5leHRlbmQoJC56ZXB0bywge1xuICAgICAgWjogZnVuY3Rpb24oZG9tLCBzZWxlY3Rvcil7XG4gICAgICAgIGRvbSA9IGRvbSB8fCBbXVxuICAgICAgICAkLmV4dGVuZChkb20sICQuZm4pXG4gICAgICAgIGRvbS5zZWxlY3RvciA9IHNlbGVjdG9yIHx8ICcnXG4gICAgICAgIGRvbS5fX1ogPSB0cnVlXG4gICAgICAgIHJldHVybiBkb21cbiAgICAgIH0sXG4gICAgICAvLyB0aGlzIGlzIGEga2x1ZGdlIGJ1dCB3b3Jrc1xuICAgICAgaXNaOiBmdW5jdGlvbihvYmplY3Qpe1xuICAgICAgICByZXR1cm4gJC50eXBlKG9iamVjdCkgPT09ICdhcnJheScgJiYgJ19fWicgaW4gb2JqZWN0XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIGdldENvbXB1dGVkU3R5bGUgc2hvdWxkbid0IGZyZWFrIG91dCB3aGVuIGNhbGxlZFxuICAvLyB3aXRob3V0IGEgdmFsaWQgZWxlbWVudCBhcyBhcmd1bWVudFxuICB0cnkge1xuICAgIGdldENvbXB1dGVkU3R5bGUodW5kZWZpbmVkKVxuICB9IGNhdGNoKGUpIHtcbiAgICB2YXIgbmF0aXZlR2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGU7XG4gICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUgPSBmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVHZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKFplcHRvKVxubW9kdWxlLmV4cG9ydHMgPSBaZXB0bztcbiIsInZhciAkID0gcmVxdWlyZSgnYmMtemVwdG8nKTtcblxuJCgnI0pfdGFyZ2V0JykuaHRtbCgnaGVsbG8gd29ybGQnKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
